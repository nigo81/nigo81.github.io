<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 逆行的狗</title>
        <link>https://nigo81.github.io/posts/</link>
        <description>所有文章 | 逆行的狗</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>tujiabing81@163.com (nigo)</managingEditor>
            <webMaster>tujiabing81@163.com (nigo)</webMaster><lastBuildDate>Fri, 10 Feb 2023 17:51:00 &#43;0800</lastBuildDate><atom:link href="https://nigo81.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>让人上瘾的emacs</title>
    <link>https://nigo81.github.io/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/</link>
    <pubDate>Fri, 10 Feb 2023 17:51:00 &#43;0800</pubDate>
    <author>nigo</author>
    <guid>https://nigo81.github.io/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/</guid>
    <description><![CDATA[<p>作为重度知识使用者，我使用过很多笔记软件。</p>
<p>包括为知笔记、印象笔记、 gingko 、vimwiki。</p>
<p>其中停留在 vimwiki 的时间比较长，它是编辑器之神 vim 的一个插件，用它积累了很多学习、工作的笔记，全部是本地的 makrdown 文件，共享盘同步。</p>
<p>从去年 8 月开始，用上了 emacs ，这个被称为神之编辑器的东西，确实让人上瘾，几乎可以用它来做任何事情。</p>
<figure>
</figure>

<p>这个编辑器不仅属于程序员，其实很多国外学术圈的人也很多人使用。</p>
<p>目前我使用它记录笔记、工作安排、 GTD 、写 Python 、写公众号、听收音机、发邮件、读 RSS 。</p>
<h2 id="读书笔记">读书笔记</h2>
<figure>
</figure>

<p>在看书时，可以方便地一边记笔记、一边看 PDF ，可以全部使用键盘。</p>
<figure>
</figure>

<p>使用<code>dictionary-overlay</code>插件，可以在阅读英文时，遇到不懂的单词可以直接标注，后面再次出现也会显示中文。</p>
<figure>
</figure>

<p>使用<code>popweb</code>插件可以直接实时查有道词典。</p>
<p>搭配着这两个插件，基本上我也不怕读英文文档了。</p>
<h2 id="org-mode">org-mode</h2>
<p>emacs最强大的就是 org-mode ，可以方便组织文字、图片、链接</p>
<figure>
</figure>

<p>每一层级可以方便的折叠，展开，非常有逻辑性。</p>
<p>同时，对于学习代码来说，他还可以直接运行，因此我们可以进行文学编程。</p>
<p>只需要在代码块中按下<code>C-c C-c</code>就可以将代码结果运行出来。</p>
<figure>
</figure>

<p>如果你喜欢双链笔记，可以使用<code>org-roam</code>插件。</p>
<h2 id="编写代码">编写代码</h2>
<p>搭配上<code>lsp-bridge</code>插件，可以瞬间变成一个成熟的 IDE ，尤其是如果平时要写多个语言，那么在一个编辑中写书，更高效。</p>
<p>毕竟快捷键都是一套自己熟悉的。</p>
<figure>
</figure>

<h2 id="gtd">GTD</h2>
<p><code>org-agenda</code> 是非常强大的任务管理插件。</p>
<p>在工作时，如果有一项任务来临，按下<code>C-c c</code>就可以弹出记录。</p>
<figure>
</figure>

<p>输入待办事项、开始时间或结束时间、重要程度</p>
<figure>
</figure>

<p>也可以使用番茄钟等对任务的时间消耗进行记录。</p>
<h2 id="rss">RSS</h2>
<p>可以订阅自己喜欢的一些博客文章或者播客、 B 站关注的 UP 主。</p>
<figure>
</figure>

<h2 id="邮件">邮件</h2>
<p>最近也把邮件客户端省了，打开 emacs 就可以查阅和发送邮件。</p>
<figure>
</figure>

<p>对联系人也是可以直接补全的。</p>
<figure>
</figure>

<p>当收到邮件时，还可以和前面<code>org-agenda</code>结合将邮件做一项待办任务，后面再进行处理。</p>
<h2 id="结语">结语</h2>
<p>emacs是一个存在了 40 多年的自由软件，到现在也还具有强大的生命力，可以预见未来的 40 年也将继续存在。</p>
<p>它是神之编辑器，在 windows 、Linux、 Mac 上都可以使用。</p>
<p>如果感兴趣可以看下陈斌写的《一年成为 Emacs 高手 (像神一样使用编辑器)》</p>
<p><a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org" target="_blank" rel="noopener noreffer ">https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org</a></p>
<p>刚开始上手配置比较困难，可以直接使用他的配置文件：</p>
<p><a href="https://github.com/redguardtoo/emacs.d" target="_blank" rel="noopener noreffer ">https://github.com/redguardtoo/emacs.d</a></p>
<p>它的配置文件应该是支持 windows 、mac、 linux 的。</p>
<p>不过后面自己熟悉后，还是可以折腾一份自己的配置，毕竟自己能掌控的才是最好的。</p>
]]></description>
</item>
<item>
    <title>IT审计之辅助财务审计</title>
    <link>https://nigo81.github.io/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/</link>
    <pubDate>Sun, 18 Sep 2022 00:00:00 &#43;0000</pubDate>
    <author>nigo</author>
    <guid>https://nigo81.github.io/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/</guid>
    <description><![CDATA[<p>在实践中， IT 审计团队通常是和财务审计团队配合完成审计工作的，区别是财务审计是对被审计单位的财务报表及其附注发表意见，而 IT 审计是对信息系统发表意见。</p>
<p>我们所做的工作是通过测试财务报表所依赖的信息系统(包括财务系统和业务系统）的有效性、数据的真实性，证明信息系统环境是否可以信赖。从某种意义上来说， IT 审计是服务于财务审计。</p>
<p>随着财务审计对 IT 审计工作的了解，他们会对 IT 审计提出更多 IT 审计工作范围外的期待。</p>
<p>尤其是在企业信息化浪潮下，受限于技术能力，财务审计团队在数据处理，方法创新方面对 IT 审计团队提出了更高的要求。因此 IT 审计如何更好地辅助财务审计是一个新的课题。</p>
<h2 id="利用python代替繁重计算">利用Python代替繁重计算</h2>
<p>在财务审计中存在大量数据处理、数据计算的基础性工作，对于这类有逻辑重复性工作， IT 审计团队可以借助 Python 批量完成。</p>
<h3 id="成本还原">成本还原</h3>
<p>对于生产制造业的 IPO 审计项目，成产品的料工费占比是财务审计特别关注的事项。而很多企业采用了逐步结转分步法来核算生产成本，由于每一道工序的半成品将是下一道工序的原材料，所以要计算产成品真实的料工费占比就需要进行成本还原。</p>
<p>如果企业使用的 ERP 系统没有还原后的成本结构报表，同时财务成本会计也未手工编制成本结构报表，那么这项核查工作对于财务审计来说将是巨大的工作量。</p>
<figure>
</figure>

<p>对于这类财审提出的需求，我们会了解企业的生产工艺，以及成本还原的计算方法，再利用 Python 编程语言，模拟成本还原的计算过程，将产成品拆分成真实的料工费，从而计算出料工费的占比。</p>
<p>通过 IT 审计团队的辅助，财审团队能完成人工短时间无法完成的工作。</p>
<h3 id="保费收入与收款流水核对">保费收入与收款流水核对</h3>
<p>在一家保险公司 IT 审计项目中，财审团队需要我们对保费收入与收款流水进行数据核对。</p>
<p>当我们了解到业务中存在大量多个保单对应多个收款流水的情况，对于这种多对多关系，正常是无法批量核对的。</p>
<figure>
</figure>

<p>一般情况下，我们核对的数据关系要么是一对一、多对一或者一对多。这三种情况我们写 SQL 语句时都很好处理，只需要将多条数据按单号聚合汇总再进行核对就可以。</p>
<p>这种多对多的关系我们可以借助数学图论中的二分图解决。</p>
<p>比如，我们将这种关系画上线，可以看到其中可以形成一些独立的网络，这里我们将这种网络（用不同颜色标记）简称为组。</p>
<p>我们将独立的网络编上组号，然后将两个数据集的金额分别按组号汇总再进行核对。</p>
<p>示例 Python 代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Net</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">setA</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;A&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;B&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;d&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;C&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;D&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;E&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;e&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">setB</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;d&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;B&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;e&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;E&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">keys</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">setA</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span> <span class="o">+</span> <span class="nb">list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">setB</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">groups</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">split_net</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">keys</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">groups</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">loop_net</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">loop_net</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">node</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">groups</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="nb">id</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">node</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">setA</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                <span class="n">sub_nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">setA</span><span class="p">[</span><span class="n">node</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">sub_nodes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">setB</span><span class="p">[</span><span class="n">node</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">sub_node</span> <span class="ow">in</span> <span class="n">sub_nodes</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">sub_node</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">sub_node</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">groups</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                        <span class="bp">self</span><span class="o">.</span><span class="n">loop_net</span><span class="p">(</span><span class="n">sub_node</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">net</span> <span class="o">=</span> <span class="n">Net</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">net</span><span class="o">.</span><span class="n">split_net</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">net</span><span class="o">.</span><span class="n">groups</span><span class="p">)</span></span></span></code></pre></div>
<p>我们借助 Python 构建了类<code>Net</code>,通过 <code>loop_net</code>函数递归找出两个数据集形成的独立网络，从而给独立网络分组，最后我们可以将两个数据集分别按组号聚合后进行核对。</p>
<h2 id="利用python获取外部信息">利用Python获取外部信息</h2>
<p>在财务审计过程中，外部信息的可靠性大于内部信息，因此审计师会查询大量的外部信息与获取的内部信息做交叉验证。</p>
<p>例如，审计一家汽车硬件销售的企业，财务审计团队计划查询销售订单中对应的汽车车架号的信息，核实有没有真实车辆以及车型信息，以及判断查询的外部信息与订单信息是否存在矛盾。</p>
<p>企业 1 年的销售订单有 30 万，依赖审计师人工查询将不太现实。那么，我们 IT 审计团队提出了两种方案：</p>
<ol>
<li>购买接口，通过 python 调用接口批量获取数据。</li>
<li>编写爬虫，通过 python 编写爬虫获取公开网站数据。</li>
</ol>
<p>出于节约成本考虑我们选择编写爬虫获取公开信息，用 python 的selenium包，自动查询网站数据，并将结果保存到本地文件。</p>
<p><a href="https://mpvideo.qpic.cn/0bc35aacyaaa5aacjvv2vfqvb2gdftuaalaa.f10002.mp4?dis_k=78250b45e8ef9c34e7a88d9aabbf2f17&amp;dis_t=1663494076&amp;vid=wxv_2180860661377925123&amp;format_id=10002&amp;support_redirect=0&amp;mmversion=false" target="_blank" rel="noopener noreffer ">视频</a></p>
<p>最后再由财务审计团队对外部信息与内部信息的一致性进行判断。</p>
<p>当然，对于很多公开网站都会有反爬措施，如验证码、访问频率限制、字体混淆等，对于我们 IT 审计团队提出了一定的技术要求。</p>
<p>除此外，财务审计对于外部信息的获取有很大的需求，如同行业财务指标、公司公告、发函快递信息、汇率、交易性金融资产价格等等。</p>
<p>这类需求，随着这几年的发展已有很多成熟的商业网站可以满足，但对于一些特殊的、行业属性较强的小众信息，如果不能批量查询，那么 IT 审计团队就可以辅助财务审计完成信息获取工作。</p>
<h2 id="利用it技术进行方法创新">利用IT技术进行方法创新</h2>
<p>2020年 6 月24日，证监会依法对獐子岛公司信息披露违法违规案作出行政处罚及市场禁入决定。证监会将渔船的北斗定位信息，通过第三方机构还原出航行轨迹，从而计算出采捕区域面积，进而估算真实成本。</p>
<p>根据这则公开披露的信息，启发了我们利用信息技术的优势，对相关数据进行深入分析挖掘，使审计工作更加智慧、高效。我们 IT 审计团队相对有信息技术的优势，而财务审计团队在财务处理、项目风险识别等方面更有优势，两个团队的良好融合会发挥1+1&gt;2的效果。</p>
<p>对于这类精纬度空间信息，我们可以通过 Python 计算面积、周长、距离。</p>
<figure>
</figure>

<p>示例 Python 代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pyproj</span> <span class="kn">import</span> <span class="n">Geod</span> <span class="c1"># 导入Geod类</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">shapely.geometry</span> <span class="kn">import</span> <span class="n">Point</span><span class="p">,</span> <span class="n">LineString</span><span class="p">,</span> <span class="n">Polygon</span> <span class="c1"># 导入点、线、多边形类</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 计算封闭区域面积、周长</span>
</span></span><span class="line"><span class="cl"><span class="n">geod</span> <span class="o">=</span> <span class="n">Geod</span><span class="p">(</span><span class="n">ellps</span><span class="o">=</span><span class="s2">&#34;WGS84&#34;</span><span class="p">)</span> <span class="c1"># 创建一个WGS84坐标系</span>
</span></span><span class="line"><span class="cl"><span class="n">polygon</span> <span class="o">=</span> <span class="n">Polygon</span><span class="p">([(</span><span class="mf">116.169465</span><span class="p">,</span> <span class="mf">39.932670</span><span class="p">),</span> <span class="p">(</span><span class="mf">116.160260</span><span class="p">,</span> <span class="mf">39.924492</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="mf">116.150625</span><span class="p">,</span> <span class="mf">39.710019</span><span class="p">),</span> <span class="p">(</span><span class="mf">116.183198</span><span class="p">,</span> <span class="mf">39.709920</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="mf">116.226950</span><span class="p">,</span> <span class="mf">39.777616</span><span class="p">),</span> <span class="p">(</span><span class="mf">116.442621</span><span class="p">,</span> <span class="mf">39.799892</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="mf">116.463478</span><span class="p">,</span> <span class="mf">39.790066</span><span class="p">),</span> <span class="p">(</span><span class="mf">116.588276</span><span class="p">,</span> <span class="mf">39.809551</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="mf">116.536091</span><span class="p">,</span> <span class="mf">39.808859</span><span class="p">),</span> <span class="p">(</span><span class="mf">116.573856</span><span class="p">,</span> <span class="mf">39.839643</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="mf">116.706380</span><span class="p">,</span> <span class="mf">39.916740</span><span class="p">),</span> <span class="p">(</span><span class="mf">116.600293</span><span class="p">,</span> <span class="mf">39.937770</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="mf">116.514805</span><span class="p">,</span> <span class="mf">39.982375</span><span class="p">),</span> <span class="p">(</span><span class="mf">116.499935</span><span class="p">,</span> <span class="mf">40.013710</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="mf">116.546520</span><span class="p">,</span> <span class="mf">40.030443</span><span class="p">),</span> <span class="p">(</span><span class="mf">116.687668</span><span class="p">,</span> <span class="mf">40.129961</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="mf">116.539697</span><span class="p">,</span> <span class="mf">40.080659</span><span class="p">),</span> <span class="p">(</span><span class="mf">116.503390</span><span class="p">,</span> <span class="mf">40.058474</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                   <span class="p">(</span><span class="mf">116.468800</span><span class="p">,</span> <span class="mf">40.052578</span><span class="p">)])</span> <span class="c1"># 将多个精纬度坐标实例化为Polygon多边形对象</span>
</span></span><span class="line"><span class="cl"><span class="n">poly_area</span><span class="p">,</span> <span class="n">poly_perimeter</span> <span class="o">=</span> <span class="n">geod</span><span class="o">.</span><span class="n">geometry_area_perimeter</span><span class="p">(</span><span class="n">polygon</span><span class="p">)</span> <span class="c1"># 计算多边形面积和周长</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">poly_area</span><span class="p">,</span> <span class="n">poly_perimeter</span><span class="p">)</span> <span class="c1"># 打印面积和周长</span></span></span></code></pre></div>
<p>面积:951546279.1726327 周长:183419.43445625657</p>
<h2 id="结语">结语</h2>
<p>随着新技术、新模式在企业发展过程中不断涌现，财务审计与 IT 审计的融合将会更加紧密。在这样的背景下， IT 审计的工作界限未来可能会更加模糊， IT 审计如何发挥我们的优势辅助财务审计高效、智慧地完成审计工作需要我们共同探索。</p>
]]></description>
</item>
<item>
    <title>逐梦 壹</title>
    <link>https://nigo81.github.io/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/</link>
    <pubDate>Sat, 27 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>nigo</author>
    <guid>https://nigo81.github.io/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/</guid>
    <description><![CDATA[<h2 id="逐梦-壹">逐梦 壹</h2>
<blockquote>
<p>梦，是模糊的、虚幻的</p>
<p>你看不清它的样子</p>
<p>只能跟着它的影子</p>
<p>一路狂奔</p>
</blockquote>
<h3 id="楔子">楔子</h3>
<p>傍晚，答完最后的考题，提前在电脑上点击了确认提交的按钮。</p>
<p>我兴奋地走出注册会计师的考场，</p>
<p>长舒一口气，终于结束了两天 CPA 的6门考试。</p>
<p>门口熙熙攘攘的人群，我像小学生一样蹦蹦跳跳地跑向在门口等我的大学同学龙哥。</p>
<p>他和他媳妇凤姐等着为我庆祝重要的考试。</p>
<p>成都，满是自由的空气，我感觉到前所未有的轻松。</p>
<p>“考得怎么样？”龙哥问。</p>
<p>“应该还可以。”</p>
<p>简单几句话后，龙哥开着车带着我去撸串了。</p>
<p>就着酒，向龙哥讲述着我这几年的辛苦生活，</p>
<p>感受着这自由的一切，满怀对未来的憧憬。</p>
<h3 id="缘起">缘起</h3>
<p>对于我来讲，梦的起点，即是CPA</p>
<p>也是整篇故事的开头。</p>
<p>它成了我对未来所有希望的载体，</p>
<p>虽然，考它的原因只是因为这是我唯二能报名的考试，</p>
<p>但，它就是波涛汹涌的大海中的一片绿叶，</p>
<p>托着我脑海中整个海市蜃楼。</p>
<p>回忆过去的一年，</p>
<p>随着军号， 6 点半起床，</p>
<p>每天看书到晚上 12 点。</p>
<p>偶尔也去菜地，锄锄地，</p>
<p>偶尔也去跑个五公里，出出汗。</p>
<p>CPA就是我的全部，</p>
<p>是我改变命运的机会，</p>
<p>是向反对我的父母的证明，</p>
<p>我相信在哪里我都可以混得很好，</p>
<p>我可以吃苦，我也拥有长期训练出来的“智力”，</p>
<p>而我需要的只是一个机会，</p>
<p>以及给我证明的时间。</p>
<p>和龙哥干完最后一杯酒，</p>
<p>我仿佛看到几年前我们一起训练、一起学习的情景，</p>
<p>入肚的酒气和回忆，</p>
<p>化为内心无尽的信心和勇气。</p>
<p>我来了，</p>
<p>属于我的自由，</p>
<p>属于我的未来！</p>
<h2 id="逐梦-贰">逐梦 贰</h2>
<blockquote>
<p>走，干审计！</p>
</blockquote>
<p>一次高中同学聚会，一位女同学在信永中和会计师事务所成都分所工作，我给她说我也去考了 CPA ，已经过了三门了，打算以后去事务所工作，你们平时工作怎么样？</p>
<p>她大概给我讲了些，说平时工作比较辛苦，出差比较多。</p>
<p>我想这辛苦能有多辛苦，总比白加黑，5+2好吧。</p>
<p>“事务所待遇怎么样？”我问。</p>
<p>“她说，你想挣多少？”，她说。</p>
<p>“干个两三年，有 5000 块不？”我小心翼翼地问。</p>
<p>她笑了笑，“那肯定是有的。”</p>
<p>“好，那我就去事务所试试。”,心里暗自下了决定。</p>
<h3 id="碰壁">碰壁</h3>
<p>2016年 4 月，我就回到了家。</p>
<p>向同学咨询了下，他们要年底才招人。</p>
<p>我想了想，反正还有剩下三门考试要考，就等到下半年去应聘，正好也可以准备下考试。</p>
<p>虽然媳妇没有上班，涵涵才 1 岁，肚子里也有了悦悦，</p>
<p>但这段时间单位还是继续发工资，所以也没有什么压力，自己每天就陪陪家人，复习考试。</p>
<p>大概到了 9 月份，一边准备着考试，一边开始投简历了。</p>
<p>为了保险起见，我百度了下会计师事务所的排名，分别到他们的官网都或者邮箱都投递了简历。</p>
<p>但都石沉大海。</p>
<p>当时我投递的简历就长这样：</p>
<figure>
</figure>

<p>我也实在找不到与工作职位相符的经历，</p>
<p>我总不可能写熟练操作山地步兵武器： 95 式自动步枪， 120 火箭筒， 82 毫米无后坐力炮， 100 毫米迫击炮，高射机枪&hellip;&hellip;.吧。</p>
<p>别人肯定会想，“哥，你是来干审计的，还是来砸场子的？”</p>
<p>连写的“单位相关财务工作”也只是和我们司务长经常聊天，硬扯的。</p>
<p>虽然写的熟练运用 office 办公软件，其实连 Excel 都还没有用过。</p>
<p>等了几天，实在等不下去了，怎么办？</p>
<p>只能发扬“没有条件也要创造条件”的优良传统了。</p>
<p>总体策略就是线下+线上的模式。</p>
<h4 id="线下">线下</h4>
<p>我拉出四川排名前 10 的事务所办公地址，跑到成都待了两天，直接到公司前台去投简历。</p>
<p>什么立信、大华、华信全跑了，一般前台收了简历就告诉我后面有招聘的时候会通知我，然后就没有然后了。</p>
<p>只有一个前台老师，年纪比较大了，忘记哪个所了，让我等一下，很负责任地跑去他们领导那里问了下，然后告诉我最近他们不招人。</p>
<p>一次、两次，信心还是有所动摇了，不知道自己找不找得到工作。</p>
<h4 id="线上">线上</h4>
<p>由于我认识的人也只有一个前面说的高中同学在事务所，也没有谁能帮忙介绍下。</p>
<p>我就跑到信永的贴吧去，看有没有了解的人指条路：</p>
<figure>
</figure>

<p>当时翻贴吧，看到最多的就是这位“不倒的斯嘉莉”，给大家回复招聘的邮箱，我一直在猜想应该是位 HR ，也不知道我猜得对不对。</p>
<figure>
</figure>

<p>当然，这也没有什么用，但好在看到同样一批求职的人在问，心里稍微感觉好点。</p>
<p>然后我又加了很多 QQ 群，看看有没有朋友能帮忙介绍的。</p>
<p>当时有个深圳的以前天职的大哥,很热心，帮我介绍给了成都这边他认识的领导。</p>
<p>屁颠屁颠地还跑去参加了天职在某个高校的校招的宣讲会，让我到年底的时候等他们通知。</p>
<p>当时很感谢这位大哥，他后面回成都了，约了几次吃饭，都没约成功，没有当面感谢他。</p>
<p>总之，这段时间都没有任何结果，只能老老实实看书了。</p>
<h3 id="柳暗花明">柳暗花明</h3>
<p>大概是考完注会后，终于收到信永的笔试通知了。</p>
<p>当时高兴坏了，总算看到了一丝希望。</p>
<p>接下来，很顺利地通过笔试。</p>
<p>后面是面试，</p>
<p>还记得是人力蒋总、汪经理、夏经理面试我，</p>
<p>开始让我自我介绍，简短介绍了下后，</p>
<p>就是问专业问题，</p>
<p>汪经理问：“审计货币资金要执行哪些审计程序。”</p>
<p>当时我飞速思考了三秒，最多就是三秒。</p>
<p>我发现我都忘记完了，因为会计这门是去年考过的。</p>
<p>我赶紧回答，“不知道。”</p>
<p>这时，汪经理笑了笑说：“哦，你应该是忘记了，后面真正工作了和实务结合起来就印象深刻了。”</p>
<p>结果，居然就没有再问我专业问题了，反而对我之前的工作比较感兴趣。</p>
<p>然后，就开始聊之前的生活，说着说着三位领导都不停在笑。</p>
<p>整个面试就在轻松的氛围下结束了。</p>
<p>出来，我还问了一起面试的朋友，他们被不停地问各种专业问题，我感觉自己运气太好了。</p>
<p>接着就是合伙人面试，当时是大罗总面试的我。</p>
<p>走进他办公室，他摘下眼镜，看着我的简历，非常儒雅的气质。</p>
<p>“我们这刚开始工资比较低，你的期望工资是多少？”罗总问。</p>
<p>“ 2000 ”，我说。</p>
<p>他突然忍不住地笑了笑说：“ 2000 倒不至于。”</p>
<p>不过，当时我就是想学东西，只要能管吃住，不给钱都愿意干。</p>
<p>罗总说：“给你两年的时间，一年 20 万不成问题。”</p>
<p>虽然后面自己干得并不好，但当时他的话让我对未来还是充满了期望。</p>
<p>走出他办公室，感觉稳了，心里憧憬着能成为一名注册会计师，能有一技之长，能混口饭吃。</p>
<p>大概 1 个月后，我收到了录取通知，凭着自己努力终于找到自己想要的工作了。</p>
<p>走，干审计！</p>
]]></description>
</item>
<item>
    <title>给老外指路</title>
    <link>https://nigo81.github.io/posts/20220825232249-%E7%BB%99%E8%80%81%E5%A4%96%E6%8C%87%E8%B7%AF/</link>
    <pubDate>Thu, 25 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>nigo</author>
    <guid>https://nigo81.github.io/posts/20220825232249-%E7%BB%99%E8%80%81%E5%A4%96%E6%8C%87%E8%B7%AF/</guid>
    <description><![CDATA[<p>下完班，一行四人坐地铁回酒店。</p>
<p>其实酒店并不远，坐一站地铁就可以到，但地铁里走的时间远远超过了坐地铁的时间。</p>
<p>今天的广州下着小雨，出站后我们在人行道等着红绿灯。</p>
<p>突然，我看着小林带着一个外国小哥走到梅总的旁边，</p>
<p>小哥让梅总帮忙接听下电话，给滴滴司机说下他在哪里。</p>
<p>开始我还以为小哥说的粤语，听不懂。</p>
<p>梅总帮他把订单取消了，然后给他指了路。</p>
<p>全程，我就听到梅总最后说了个Of course</p>
<p>中间我问小林，为什么你自己不给小哥说，要让梅总去？</p>
<p>小林说：“我英语不好。”</p>
<p>我说：“你这个英语是可以的，指个路没问题。”</p>
<p>她说：“我是有家室的人。”</p>
<p>我看了看小哥， 180 几，高高瘦瘦，一幅清秀的样子。</p>
<p>“你怕是想得有点多哦，别人只是问个路，你还来个I hava family”</p>
<p>翻了一个大大的白眼给她。</p>
]]></description>
</item>
<item>
    <title>无题 2022-08-22</title>
    <link>https://nigo81.github.io/posts/20220822234714-%E6%97%A0%E9%A2%98_2022_08_22/</link>
    <pubDate>Mon, 22 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>nigo</author>
    <guid>https://nigo81.github.io/posts/20220822234714-%E6%97%A0%E9%A2%98_2022_08_22/</guid>
    <description><![CDATA[<p>时间一天一天过去，</p>
<p>它的离去甚至都不曾通知你，</p>
<p>挤在早高峰的地铁，</p>
<p>拘谨的空间中也无人认识你，</p>
<p>每天做着一件又一件重复的事情，</p>
<p>迎着朝霞，送走夕阳，</p>
<p>走过无数个城市，</p>
<p>当夜晚来临，</p>
<p>蜗居在廉价酒店，</p>
<p>吃着一份外卖，</p>
<p>这又是未曾通知且不曾期待的一天。</p>
]]></description>
</item>
<item>
    <title>IT审计之独立数据核查</title>
    <link>https://nigo81.github.io/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/</link>
    <pubDate>Sun, 14 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>nigo</author>
    <guid>https://nigo81.github.io/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/</guid>
    <description><![CDATA[<p>&ldquo;数据是 21 世纪的石油，而分析则是内燃机。&rdquo;</p>
<p>如果说数据是石油，其本身是无价值的，只有对数据深度挖掘，才能为企业业务增长提供新的引擎，形成真正的数据资产。</p>
<p>近年来，随着信息技术飞速的发展，企业信息化建设已由类似于 ERP 等行业属性相对较强的信息系统建设转向信息系统之上的数据管理与业务应用建设，如建设适应企业业务发展的数据中台、业务中台等新型 IT 架构。通过建设敏捷高效可复用的支撑平台，为业务数字化创新提供高效数据和服务支撑。</p>
<p>IT审计执行的信息系统一般控制、应用控制测试是对企业信息科技领域管控的评价，仍然是对信息系统基础设施及建立其上的业务流程的控制测试。面对企业业务开展所产生的海量数据，其勾勒出了企业经营活动真实画像，数据核查工作在应对舞弊、异常检测方面显得越来越重要。</p>
<h2 id="数据核查的特点">数据核查的特点</h2>
<h3 id="由抽样审计转变为全量审计">由抽样审计转变为全量审计</h3>
<p>IT审计的数据核查大多时候是为财务审计服务的。受限于技术手段，财务审计在进行数据核查时，往往是抽样审计。但面对类似电商、游戏等这样的互联网企业所产生的海量销售订单，抽样检查多少个合适呢？ 100 个、 1000 个还是 10000 个才合适呢？</p>
<p>借助于 SQL 、ClickHouse等大数据分析技术，我们可以对上亿行的数据量进行全量核查，全量分析。</p>
<figure>
</figure>

<p>例如，对于大型集团企业，审计在执行银行流水与财务序时账核对时一般仅对大额流水进行检查，并且会耗用大量人力和时间。如果企业开通了银企直联，银行流水与序时账一般会有关联字段，我们可以利用 SQL 进行全量双向核对；如果企业未开通银企直联，或没有关联字段，我们仍然可以利用 Python 按照人工核对的逻辑编写代码，实现网银流水与序时账的全量核对，不再区分金额大小。</p>
<p>再如，对于生产工艺复杂的制造型企业，其工序可能多达十几步或者几十步，审计难以对生产成本进行重新计算以验证存货计量的准确性。但对于计算机来说，这些工序的成本分摊逻辑是一致的，借助于 Python ，我们也是可以实现对所有工单的生产成本的归集和分摊进行全量重新计算。对于这些收入、成本计算逻辑复杂的企业，利用 Python 这样的编程语言，复现系统的计算逻辑，能取得很好的数据核查效果。</p>
<h3 id="数据分析的颗粒度更小">数据分析的颗粒度更小</h3>
<p>财务审计在执行分析性程序时，往往使用的数据颗粒度很大，如按年或月的汇总金额去进行波动分析。数据的颗粒度就像一张照片的像素，当颗粒度很大时，照片所呈现的信息将会失真，很多细节信息将难以发现。而 IT 审计进行数据核查时一般按照最小颗粒度的数据进行多维度分析，如订单、小时、分钟、渠道等，这是异常检测的基础。</p>
<figure>
</figure>

<p>如上图所示，当我们将订单按照一天 24 小时划分为 24 个区间，分别统计每个小时区间的订单金额时，能发现 2019 年0点和 2020 年8点的订单金额显示异常。这就是将分析的颗粒度变小的好处，能还原更多细节信息。</p>
<figure>
</figure>

<p>如上图所示，我们甚至可以按分钟去统计次数，去检测是否存在利用机器人等技术短时间大量刷单的情况。</p>
<figure>
</figure>

<p>如上图所示，我们可以以订单的颗粒度去分析单价的稳定性，对于发散的或者偏离正态分布的数据检测出来，进一步去核查异常数据产生的原因。</p>
<h3 id="数据核查对象多样化">数据核查对象多样化</h3>
<p>在大数据时代，几乎所有的人、事、物都能够数据化，进而被分析。</p>
<p>我们将数据核查的对象可以划分为结构化数据和非结构化数据，结构化数据即为能够用数据或者统一结构加以表示的信息，如信息系统中的各种报表。而非结构化数据，就是一些无法用数字或统一的结构表示，如合同、发票、邮件、网页等。</p>
<p>IT审计数据核查的对象不再局限于财务账、业务报表等结构化数据，借助于新的 IT 技术，我们可以将数据核查的范围延伸到非结构化的数据。</p>
<figure>
</figure>

<p>如上图所示，审计一家航运企业，以前我们只能通过手工抽样查询船舶定位位置与业务系统中的班期表核对，验证航行的真实性。现在我们可以利用 Python 爬虫技术，批量解析网页中船舶经纬度信息和出发地、目的地，全量核对。</p>
<figure>
</figure>

<p>如上图所示，借助于 OCR 技术，我们可以将非结构化的发票图片文件识别成结构化数据，从而实现发票的全量核查。</p>
<p>当然，我们还可以将数据划分为财务数据、业务数据、日志数据三种类型，财务审计在做数据核查时更多核查的是财务数据。而 IT 审计核查的对象会延伸到业务数据和日志数据。</p>
<p>从企业舞弊造假成本来说，=财务数据&lt;业务数据&lt;日志数据=，我们更倾向于通过日志数据、业务数据的核查来验证财务数据的真实性、准确性、完整性。</p>
<figure>
</figure>

<p>如上图所示，审计一家制造型企业，我们获取了公司 ERP 系统的操作日志，按天对作业频率进行分析，检查作业频率异常偏高的情况，以排查是否存在舞弊迹象。由于操作日志真实反映了人员的所有系统操作，其数据的可信度相比财务数据更高，能更好地应对舞弊欺诈行为。</p>
<p>总之， IT 审计的数据核查的来源具有多样化的特点。</p>
<h2 id="数据核查的方法">数据核查的方法</h2>
<p>IT审计数据核查需要将 IT 技术与审计方法相结合。在信息技术飞速发展的浪潮下，我们需要拥抱新技术、新思想、新变革，同时对我们的审计思路、审计模式进行创新。</p>
<p>审计一家游戏企业，玩家通过充值获得游戏币，游戏币可以在商城中购买游戏道具，购买的道具可以自己使用也可以赠送他人。在审计过程中，我们发现一些账号的充值金额异常大，我们利用 Neo4j 图数据库将所有道具的赠送关系进行网络分析：</p>
<figure>
</figure>

<p>我们发现消费金额前 25 名的异常账号，其中就有 19 个账号相互之间有赠送行为，形成了网络。通过进一步审计程序，我们发现其中一些账号是淘宝店家，他们通过从价格更低的渠道充值后，以&quot;赠送&quot;的方式卖给游戏玩家，因此其充值金额较大，且存在大量赠送行为。</p>
<p>利用 Neo4j 、Gephi、 NetworkX 等工具，我们可以轻松地进行复杂网络关系分析，挖掘出数据背后的关联关系，这是新技术为我们数据核查带来了新的手段、新的方法。</p>
<p>但 IT 技术仅仅是一种工具，我们在做数据核查时，更多的需要和我们的审计方法论结合、和生活常识结合、和行业经验结合、和统计学知识结合。</p>
<p>例如， IPO 的电商企业的数据核查要求我们 IT 审计对是否存在刷单行为进行分析，从数据分析的工具上讲，我们使用 SQL 就能进行分析，但我们从什么维度去分析能发现是否存在刷单行为呢？</p>
<p>其实我觉得更好的方法是从生活常识入手，从行业经验入手，我们可以去找参与过刷单朋友，询问他们是如何刷单的，了解其特点，然后再设计数据分析的维度。</p>
<p>例如，我向朋友了解到有的刷单方法是找普通的人去购买，发货的时候只发一个空盒子或者价值较小的重量较轻的东西，完成订单后，再通过微信红包的方式返钱给他。</p>
<p>针对这种刷单方式，我们就可以利用“发货重量轻“的特征去筛选出这些异常订单。我们可以根据商品 SKU 的重量信息，计算出系统里一个订单的重量，再去和物流公司发货时称重重量核对，从而检测出重量偏离较大的异常订单。</p>
<p>当然，这只是一个举例，通过这个例子，我想说明在 IT 审计数据核查过程中分析的思路很多时候比技术手段更加重要。</p>
<p>我们正处在信息爆炸、技术变革的时代，我们应该学习新的 IT 技术，积极探索新的审计方法、审计思路，通过深入挖掘数据背后的价值，提高我们的审计质量、审计效率。</p>
]]></description>
</item>
<item>
    <title>超能英雄</title>
    <link>https://nigo81.github.io/posts/20220814214721-%E8%B6%85%E8%83%BD%E8%8B%B1%E9%9B%84/</link>
    <pubDate>Sun, 14 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>nigo</author>
    <guid>https://nigo81.github.io/posts/20220814214721-%E8%B6%85%E8%83%BD%E8%8B%B1%E9%9B%84/</guid>
    <description><![CDATA[<p>下午被安排给新员工培训 SQL ，带着大家从安装数据库到一些简单的 SQL 语句，讲了 3 个小时。</p>
<p>其实如果大家平时项目上遇不到这种大数据量的情景的话，基本上没有太大的用。但整个分所还是有不少的这样的项目。</p>
<p>唯一的作用感觉就是让他们有一个亲身处理 400 多万行数据的感觉，将来如果遇到了知道学习什么。</p>
<p>其实做一项系统工程，需要处理好三个维度：时间维、逻辑维、知识维。</p>
<p>其中知识维就是要么你知道用什么知识，要么你能用拥有这些知识的人。无论打工者还是老板概莫能外。</p>
<p>对于学习知识的我们来说，其实知识本身并不重要，而习得知识的能力很重要。</p>
<p>你如果留心周围的人会发现，一般厉害的人不只是一方面厉害，更多情况下多方面厉害。一个掌握学习能力的人你随便丢他到陌生的领域，大概率他也会很厉害。</p>
<p>大部分人都停留在表面，觉得做一份工作，学一门知识，自己就是专家了，忽视了背后的基础技能的重要性。其实呢，无论什么工作都有可能被淘汰，任何一门知识都都会变得无用。你平时所做的努力，都在积累背后的某一种能力。</p>
<p>而最能让你有碗饭吃就是这些基础能力。</p>
<p>就像我的领导，我觉得她有一种能力就是说服人的能力，同样一句话，从她嘴里说出来，就能让人信服。有这样的能力，去哪个公司不能当个中层领导？</p>
<p>就像几年前我加入过&quot;千熊会员&quot;，一个四大出来做知识付费的审计师，我发现他有个能力，就是能把一个方法、流程包装成非常吸引人的&quot;产品&quot;，靠着这个&quot;包装&quot;和总结的能力确实能把知识卖出去。</p>
<p>而我评估自己的能力就是数理逻辑能力，只要是有一定门槛，依赖数理逻辑的专业，我有信心能快速上手。</p>
<p>人的延展性是非常强的，不只一种可能。如果有一天这个行业都没了，总得吃饭吧，我可能为了生计就得去跑外卖或者开滴滴。</p>
<p>如果我是去跑外卖，在熟悉情况后，我也一定会去计算和统计哪种路径、时间、方式去跑能时效比最高。</p>
<p>如果我是去跑滴滴，在熟悉情况后，我也一定会去计算哪个时间段、哪个区域去跑最挣钱。</p>
<p>而我还是得用我最擅长的技能。我还会利用以前在部队宣传股学到的技能，去做自媒体，讲我们外卖小哥的故事。</p>
<p>上高中时，非常喜欢看的美剧《 Heros 》(超能英雄)，我最喜欢的一个角色就是 Peter ，他的超能力就是可以学习其他有超能力的人的超能力，简直太 Bug 了。</p>
<p>还有一个反派角色是 Sylar ，他的超能力是洞悉事物的本质，但是需要挖开别人的脑子，过于残忍，不太喜欢。</p>
<p>最后，想说什么呢？</p>
<blockquote>
<p>多学点别人带不走的东西，时刻保持在哪里都可以吃饭的能力。</p>
</blockquote>
]]></description>
</item>
<item>
    <title>传销组织层级结构分析</title>
    <link>https://nigo81.github.io/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</link>
    <pubDate>Sun, 14 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>nigo</author>
    <guid>https://nigo81.github.io/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[<p>前几天一个网友发了一个传销组织的数据，他想求每个层级的人数。</p>
<figure><figcaption>
            <p><!-- raw HTML omitted -->Figure 1: <!-- raw HTML omitted -->图1</p>
        </figcaption>
</figure>

<p>这两天正好学了<code>networkx</code>，我们来看如果用网络分析解决这个问题。</p>
<figure><figcaption>
            <p><!-- raw HTML omitted -->Figure 2: <!-- raw HTML omitted -->图2</p>
        </figcaption>
</figure>

<p>这是整个推荐关系的可视化网络图。其中正红色的点为根节点。</p>
<p>下面我们一步一步来解决。</p>
<h2 id="读取数据并创建网络">读取数据并创建网络</h2>
<p>我们使用<code>pandas</code>读取 excel 数据，并用<code>nx.from_pandas_edgelist(df,source,target,edge_attr,create_using)</code>函数来创建一个图=G=。</p>
<p>这个函数是根据边数据来创建图，其中：</p>
<ul>
<li>source:df中表示边起始的列名（推荐人）。</li>
<li>target:df中表示边目标的列名（被推荐人）。</li>
<li>edge\_attr:df中表示边属性的列名（如权重，颜色，大小等）。</li>
<li>create\_using:表示创建什么类型的图，无向图，有向图等。这里我们使用有向图=DiGraph=,因为推荐关系是有方向的。</li>
</ul>
<!-- raw HTML omitted -->
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">networkx</span> <span class="k">as</span> <span class="nn">nx</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 读取数据创建图</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;~/传销原始数据.xlsx&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="s1">&#39;推荐人ID&#39;</span><span class="p">,</span> <span class="s1">&#39;被推荐人ID&#39;</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;source&#39;</span><span class="p">,</span> <span class="s1">&#39;target&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">G</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">from_pandas_edgelist</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="s1">&#39;source&#39;</span><span class="p">,</span> <span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="n">create_using</span><span class="o">=</span><span class="n">nx</span><span class="o">.</span><span class="n">DiGraph</span><span class="p">())</span></span></span></code></pre></div>
<p>当然这样创建的图=G=只是一个类的实例化，并不一张真正可视化的图。如果你想可视化它，可以使用=pyvis=包进行，它可以生成一个可交互的网络图。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pyvis.network</span> <span class="kn">import</span> <span class="n">Network</span>
</span></span><span class="line"><span class="cl"><span class="n">nt</span> <span class="o">=</span> <span class="n">Network</span><span class="p">(</span><span class="s1">&#39;650px&#39;</span><span class="p">,</span> <span class="s1">&#39;1250px&#39;</span><span class="p">,</span> <span class="n">directed</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nt</span><span class="o">.</span><span class="n">from_nx</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nt</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="s1">&#39;test.html&#39;</span><span class="p">)</span></span></span></code></pre></div>
<p>这将会生成如图 2 所示的网络图。</p>
<h2 id="找到根节点">找到根节点</h2>
<p>考虑到这个网络是一个传销组织，那么正常情况下应该是有个唯一的根节点，整个组织类似树状结构。</p>
<p>我们先得找到这个根节点，怎么找呢？</p>
<p>这就需要先引一个图论中的概念<strong>度</strong>，度的意思就是一个节点的相邻节点的数量。</p>
<figure><figcaption>
            <p><!-- raw HTML omitted -->Figure 3: <!-- raw HTML omitted -->图3</p>
        </figcaption>
</figure>

<p>如图 3 所示，如果不考虑边的方向，那点节点 1 有4个相邻节点（有边相连），那么节点 1 的度就是 4 。</p>
<p>即<code>degree=4</code>。</p>
<p>但是这是一个有向图，就会分成<code>in_degree</code>和 <code>out_degree</code> 两种度。</p>
<p>那么我们要找到根结点，只需要去找<code>in_degree==0</code>的节点就是根节点，同理<code>out_degree==0</code>的节点为末级节点。</p>
<p>因此，我们写代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">top_nodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">in_degree</span><span class="p">()</span> <span class="k">if</span> <span class="n">d</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;root node:&#39;</span><span class="p">,</span> <span class="n">top_nodes</span><span class="p">)</span></span></span></code></pre></div>
<p>可以计算出根结点为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[</span><span class="mi">0</span><span class="p">]</span></span></span></code></pre></div>
<figure><figcaption>
            <p><!-- raw HTML omitted -->Figure 4: <!-- raw HTML omitted -->图4</p>
        </figcaption>
</figure>

<p>如图 4 所示，我们可以找到图中的根节点，它就是这个网络的头目。</p>
<h2 id="计算网络层级关系">计算网络层级关系</h2>
<p>为了计算网络层级关系，这里我们需要引入一个概念*距离*，也就是两个节点之间的最短路径长度。</p>
<figure><figcaption>
            <p><!-- raw HTML omitted -->Figure 5: <!-- raw HTML omitted -->图5</p>
        </figcaption>
</figure>

<p>对于节点 1 到节点 4 的距离为 3 ，因为两条路径可以从节点 1 到达节点 3 ：</p>
<ul>
<li>[1, 2, 3, 4]</li>
<li>[1, 2, 5, 4]</li>
</ul>
<p>这两条路径最短的距离就是 3 。</p>
<p>在<code>networkx</code>库中有个函数<code>nx.shortest_path_length(G,source,target)</code>可以求出节点<code>source</code>和 <code>target</code> 之间的距离。</p>
<p>如果省略<code>target</code>参数，就可以求出<code>source</code>下所有节点与<code>source</code>之间的距离。</p>
<p>因此，我们只需要用=nx.shortest_path_length(G, 0)=就可以求出=根节点0=下的所有节点的距离，也就是*网络层级*。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">level</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">shortest_path_length</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">set_node_attributes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="s1">&#39;level&#39;</span><span class="p">)</span></span></span></code></pre></div>
<p><code>level</code> 的值是下面这样的=节点:距离=的字典，可以看到一共 32 个层级。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="mi">2576</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="o">...</span><span class="p">,</span> <span class="mi">5659</span><span class="p">:</span> <span class="mi">32</span><span class="p">}</span></span></span></code></pre></div>
<p>我们求出了所有子节点到根节点的距离<code>level</code>列表，用<code>set_node_attributes()</code>函数给每个节点添加一个层级属性。</p>
<p>下面，我们只需要将<code>level</code>列表，统计出 1-32 层级中分别有哪些节点即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 显示层级</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">level</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodes</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">l</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="n">nodes</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 打印前10层节点</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">l</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span></span></span></code></pre></div>
<p>这里我们展示前 10 层级对应的哪些节点：</p>
<figure>
</figure>

<p>当然，我们将上面<code>print(l,n)</code>替换成<code>print(l,len(n))</code>，就可以看到每一层级对应的节点数量。</p>
<figure><figcaption>
            <p><!-- raw HTML omitted -->Figure 6: <!-- raw HTML omitted -->图6</p>
        </figcaption>
</figure>

<h2 id="下线前10的节点">下线前10的节点</h2>
<p>我们知道=度=表示了相邻节点数量，那么度值最大的 10 个，也就是下线数最大的 10 个。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">degrees</span> <span class="o">=</span> <span class="n">G</span><span class="o">.</span><span class="n">out_degree</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">top_degree_nodes</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">degrees</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)[:</span><span class="mi">10</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">top_degree_nodes</span><span class="p">)</span></span></span></code></pre></div>
<p>计算结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">[(</span><span class="mi">2828</span><span class="p">,</span> <span class="mi">264</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">115</span><span class="p">),</span> <span class="p">(</span><span class="mi">2700</span><span class="p">,</span> <span class="mi">86</span><span class="p">),</span> <span class="p">(</span><span class="mi">2833</span><span class="p">,</span> <span class="mi">65</span><span class="p">),</span> <span class="p">(</span><span class="mi">2999</span><span class="p">,</span> <span class="mi">55</span><span class="p">),</span> <span class="p">(</span><span class="mi">2560</span><span class="p">,</span> <span class="mi">53</span><span class="p">),</span> <span class="p">(</span><span class="mi">2574</span><span class="p">,</span> <span class="mi">42</span><span class="p">),</span> <span class="p">(</span><span class="mi">3021</span><span class="p">,</span> <span class="mi">37</span><span class="p">),</span> <span class="p">(</span><span class="mi">2651</span><span class="p">,</span> <span class="mi">36</span><span class="p">),</span> <span class="p">(</span><span class="mi">2834</span><span class="p">,</span> <span class="mi">31</span><span class="p">)]</span></span></span></code></pre></div>
<p>可以看到下线最多的节点是<code>节点2828</code>有 264 个下线，第二是<code>根节点0</code>有 115 个下线。</p>
<figure><figcaption>
            <p><!-- raw HTML omitted -->Figure 7: <!-- raw HTML omitted -->图7</p>
        </figcaption>
</figure>

<p>这些节点表现在图中就是像水母一样的中心节点。</p>
<h2 id="最大介绍top10">最大介绍top10</h2>
<p>除了通过=度=来衡量一个节点是否为关键节点外，我们还可以通过介数来衡量。</p>
<p>如图 8 所示，根节点 0 传递到节点1,节点2,节点3&hellip;.</p>
<p>其中节点2,节点 5 的度非常小，分别为 2 和1,但是如果少了他们的话，后面整个网络就断了。</p>
<p>介数就是表示网络中群体与群体之间的中间人角色，现实生活中如果度数大的是黄牛，那么这个介数的中间人就是给黄牛提供渠道的关键人物。</p>
<figure><figcaption>
            <p><!-- raw HTML omitted -->Figure 8: <!-- raw HTML omitted -->图8</p>
        </figcaption>
</figure>

<p>我们在图中将前 10 大中介点标记成了绿色，方便查看。</p>
<h2 id="完整代码">完整代码</h2>
<p>以上分析的完整代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">networkx</span> <span class="k">as</span> <span class="nn">nx</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pyvis.network</span> <span class="kn">import</span> <span class="n">Network</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 读取数据创建图</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="s1">&#39;~/传销原始数据.xlsx&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="s1">&#39;推荐人ID&#39;</span><span class="p">,</span> <span class="s1">&#39;被推荐人ID&#39;</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;source&#39;</span><span class="p">,</span> <span class="s1">&#39;target&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">G</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">from_pandas_edgelist</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="s1">&#39;source&#39;</span><span class="p">,</span> <span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="n">create_using</span><span class="o">=</span><span class="n">nx</span><span class="o">.</span><span class="n">DiGraph</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 求根节点</span>
</span></span><span class="line"><span class="cl"><span class="n">top_nodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">in_degree</span><span class="p">()</span> <span class="k">if</span> <span class="n">d</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;root node:&#39;</span><span class="p">,</span> <span class="n">top_nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 节点层级</span>
</span></span><span class="line"><span class="cl"><span class="n">level</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">shortest_path_length</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">set_node_attributes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="s1">&#39;level&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示层级</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">level</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodes</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">l</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="n">nodes</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 打印前10层节点</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">l</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">data</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 打印前10大度节点</span>
</span></span><span class="line"><span class="cl"><span class="n">degrees</span> <span class="o">=</span> <span class="n">G</span><span class="o">.</span><span class="n">out_degree</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">top_degree_nodes</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">degrees</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)[:</span><span class="mi">10</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">top_degree_nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 给节点添加属性</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">node</span><span class="p">][</span><span class="s1">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">level</span> <span class="o">=</span> <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">node</span><span class="p">][</span><span class="s1">&#39;level&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 给节点添加大小属于</span>
</span></span><span class="line"><span class="cl">    <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">node</span><span class="p">][</span><span class="s1">&#39;value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">-</span> <span class="n">level</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 第一、二、三层节点添加颜色</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">level</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">node</span><span class="p">][</span><span class="s1">&#39;color&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;red&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">level</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">node</span><span class="p">][</span><span class="s1">&#39;color&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;fuchsia&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">level</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">node</span><span class="p">][</span><span class="s1">&#39;color&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;purple&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 中介点</span>
</span></span><span class="line"><span class="cl"><span class="n">center</span> <span class="o">=</span> <span class="n">nx</span><span class="o">.</span><span class="n">betweenness_centrality</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">center_tops</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">center</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)[:</span><span class="mi">10</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 给前10大中介点添加颜色</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">center_tops</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">G</span><span class="o">.</span><span class="n">nodes</span><span class="p">[</span><span class="n">node</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="s1">&#39;color&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;teal&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nx</span><span class="o">.</span><span class="n">write_gexf</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="s1">&#39;test.gexf&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nt</span> <span class="o">=</span> <span class="n">Network</span><span class="p">(</span><span class="s1">&#39;650px&#39;</span><span class="p">,</span> <span class="s1">&#39;1250px&#39;</span><span class="p">,</span> <span class="n">directed</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nt</span><span class="o">.</span><span class="n">from_nx</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">nt</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="s1">&#39;test.html&#39;</span><span class="p">)</span></span></span></code></pre></div>
<h2 id="结语">结语</h2>
<p>networkx是复杂网络分析的利器，搭配上可视化库 pyvis ，可以简单几行代码完成分析和可视化。</p>
]]></description>
</item>
<item>
    <title>狗哥去照相馆</title>
    <link>https://nigo81.github.io/posts/20220814214405-%E7%8B%97%E5%93%A5%E5%8E%BB%E7%85%A7%E7%9B%B8%E9%A6%86/</link>
    <pubDate>Sun, 14 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>nigo</author>
    <guid>https://nigo81.github.io/posts/20220814214405-%E7%8B%97%E5%93%A5%E5%8E%BB%E7%85%A7%E7%9B%B8%E9%A6%86/</guid>
    <description><![CDATA[<p>给一个公众号投了关于 IT 审计的文稿，需要一张作者照片。</p>
<p>但我发现之前没有拍稍微正式点的形象照，所以就一个人跑去照相馆拍了。</p>
<p>说实话，平时我都不拍照，我媳妇用手机给我拍也是抗拒的，每次都是一种不自然的状态。</p>
<p>就听到给我照相的小哥不停的说：</p>
<p>&ldquo;哎～，来微笑&rdquo;</p>
<p>&ldquo;对，稍微笑一点&rdquo;</p>
<p>&ldquo;哎～，来～，笑一下&rdquo;</p>
<p>&ldquo;对，对～，很好，自然一点&rdquo;</p>
<p>&ldquo;表情僵了，来，自然一点&rdquo;</p>
<p>我都替小哥着急，想着赶紧拍完了事。</p>
<p>为了后面不再拍照，就一次性选了 9 张照片，花了 900 大洋，有点心疼。</p>
<p>如果有 IT 审计相关的业务咨询可以邮件联系:</p>
<blockquote>
<p><a href="mailto:tujiabing81@163.com" rel="">tujiabing81@163.com</a></p>
</blockquote>
]]></description>
</item>
<item>
    <title>批量改变文件最后修改时间</title>
    <link>https://nigo81.github.io/posts/20220814214636-%E6%89%B9%E9%87%8F%E6%94%B9%E5%8F%98%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/</link>
    <pubDate>Sun, 14 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>nigo</author>
    <guid>https://nigo81.github.io/posts/20220814214636-%E6%89%B9%E9%87%8F%E6%94%B9%E5%8F%98%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/</guid>
    <description><![CDATA[<p>有网友问，怎么批量修改文件最后的修改日期。</p>
<p>比如， excel 文件、 word 文件等。</p>
<p>当然我们先将电脑日期设置成以前的某个日期，然后一个一个打开文件后，修改下，再保存。这样可以完成日期的更换。</p>
<p>今天我们用 python 来实现文件修改日期的批量替换。</p>
<figure>
</figure>

<p>比如在=/home/nigo/tmp/test=文件夹下有一些文件，最后修改日期是=2022-07-19=。</p>
<p>我们只需要做两步：</p>
<ol>
<li>循环获取该文件夹所有文件路径。</li>
<li>修改文件日期</li>
</ol>
<p>我们先看修改文件日期：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">change_file_date</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">atime</span><span class="p">,</span> <span class="n">mtime</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;改变文件修改日期和访问日期&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">stat</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">utime</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="p">(</span><span class="n">atime</span><span class="p">,</span> <span class="n">mtime</span><span class="p">))</span></span></span></code></pre></div>
<p>我们只需要用<code>os.utime</code>函数就可以将文件的访问日期和修改日期分别改变为<code>atime</code>和 <code>mtime</code> （时间戳数字）。</p>
<p>完整代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">change_file_date</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">atime</span><span class="p">,</span> <span class="n">mtime</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;改变文件修改日期和访问日期&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">stat</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">utime</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="p">(</span><span class="n">atime</span><span class="p">,</span> <span class="n">mtime</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_file_list</span><span class="p">(</span><span class="nb">dir</span><span class="p">,</span> <span class="n">file_list</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;递归获取文件夹下所有的文件路径&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">newdir</span> <span class="o">=</span> <span class="nb">dir</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="nb">dir</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">file_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">dir</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isdir</span><span class="p">(</span><span class="nb">dir</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="nb">dir</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#如果需要忽略某些文件夹，使用以下代码</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># if s == &#34;xxx&#34;:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># continue</span>
</span></span><span class="line"><span class="cl">            <span class="n">newdir</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">dir</span><span class="p">,</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">get_file_list</span><span class="p">(</span><span class="n">newdir</span><span class="p">,</span> <span class="n">file_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">file_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 需要修改的文件所在的文件夹</span>
</span></span><span class="line"><span class="cl">    <span class="n">modify_directory</span> <span class="o">=</span> <span class="s1">&#39;/home/nigo/tmp/test&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 需要设置成的修改时间：年,月,日,时,分,秒</span>
</span></span><span class="line"><span class="cl">    <span class="n">modify_time</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2022</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">31</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 将时期转化为时间戳</span>
</span></span><span class="line"><span class="cl">    <span class="n">mtime</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">timestamp</span><span class="p">(</span><span class="n">modify_time</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 获取指定文件夹下的所有文件路径</span>
</span></span><span class="line"><span class="cl">    <span class="n">paths</span> <span class="o">=</span> <span class="n">get_file_list</span><span class="p">(</span><span class="n">modify_directory</span><span class="p">,</span> <span class="p">[])</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 循环所有文件</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">paths</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 修改文件的访问时间和修改时间</span>
</span></span><span class="line"><span class="cl">        <span class="n">change_file_date</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">mtime</span><span class="p">,</span> <span class="n">mtime</span><span class="p">)</span></span></span></code></pre></div>
<p>我们执行代码将<code>/home/nigo/tmp/test</code>文件夹下的所有文件修改日期改变为<code>2022-04-05 18:20:31</code>。</p>
<figure>
</figure>

<p>可以看到所有文件的修改日期已全部批量修改。</p>
<p>当然你会 VBA 的话，也可以使用 VBA 实现，只是用 Python 更快速一点。</p>
]]></description>
</item>
</channel>
</rss>
