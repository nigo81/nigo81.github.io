[{"categories":null,"content":"个人介绍 我的昵称是nigo，一条逆行的狗。 毕业于国防科学技术大学，注册会计师，边防连队任职步兵排长 3 年，复员后从事财务审计 2 年，此后从事 IT 审计至今。 个人利用擅长 python 、sql、 clickhouse 等技术进行数据分析。 爱好折腾 Linux 、emacs。 ","date":"2023-02-11","objectID":"/about/:1:0","tags":null,"title":"个人介绍","uri":"/about/"},{"categories":null,"content":"微信公众号 2018年 4 月开通微信公众号：逆行的狗，记录平时审计工作中所思、所学、所想。 最开始写过一堆用于审计的 VBA 工具，认识了一些志同道合的朋友。 平时发文较多的主要是在微信公众号上。 ","date":"2023-02-11","objectID":"/about/:2:0","tags":null,"title":"个人介绍","uri":"/about/"},{"categories":null,"content":"BiliBili 在 B 站的账号是nigo81，有时会录制一些关于 python 、sql、 Linux 相关的视频。 ","date":"2023-02-11","objectID":"/about/:3:0","tags":null,"title":"个人介绍","uri":"/about/"},{"categories":null,"content":"出版物 在工作期间在电子工业出版社出版过两本书，每本书都在 B 站上传了对应的配套视频。 《审计效率手册》 《 IT 审计：用SQL+Python提升工作效率》 虽然自己不是什么专家，但平时工作中比较喜欢学习和思考，所以写作对自己来说也就是学习和思考的输出，这对我是非常有益的。 ","date":"2023-02-11","objectID":"/about/:4:0","tags":null,"title":"个人介绍","uri":"/about/"},{"categories":["效率"],"content":"作为重度知识使用者，我使用过很多笔记软件。 包括为知笔记、印象笔记、 gingko 、vimwiki。 其中停留在 vimwiki 的时间比较长，它是编辑器之神 vim 的一个插件，用它积累了很多学习、工作的笔记，全部是本地的 makrdown 文件，共享盘同步。 从去年 8 月开始，用上了 emacs ，这个被称为神之编辑器的东西，确实让人上瘾，几乎可以用它来做任何事情。 这个编辑器不仅属于程序员，其实很多国外学术圈的人也很多人使用。 目前我使用它记录笔记、工作安排、 GTD 、写 Python 、写公众号、听收音机、发邮件、读 RSS 。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:0:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"读书笔记 在看书时，可以方便地一边记笔记、一边看 PDF ，可以全部使用键盘。 使用dictionary-overlay插件，可以在阅读英文时，遇到不懂的单词可以直接标注，后面再次出现也会显示中文。 使用popweb插件可以直接实时查有道词典。 搭配着这两个插件，基本上我也不怕读英文文档了。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:1:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"org-mode emacs最强大的就是 org-mode ，可以方便组织文字、图片、链接 每一层级可以方便的折叠，展开，非常有逻辑性。 同时，对于学习代码来说，他还可以直接运行，因此我们可以进行文学编程。 只需要在代码块中按下C-c C-c就可以将代码结果运行出来。 如果你喜欢双链笔记，可以使用org-roam插件。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:2:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"编写代码 搭配上lsp-bridge插件，可以瞬间变成一个成熟的 IDE ，尤其是如果平时要写多个语言，那么在一个编辑中写书，更高效。 毕竟快捷键都是一套自己熟悉的。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:3:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"GTD org-agenda 是非常强大的任务管理插件。 在工作时，如果有一项任务来临，按下C-c c就可以弹出记录。 输入待办事项、开始时间或结束时间、重要程度 也可以使用番茄钟等对任务的时间消耗进行记录。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:4:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"RSS 可以订阅自己喜欢的一些博客文章或者播客、 B 站关注的 UP 主。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:5:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"邮件 最近也把邮件客户端省了，打开 emacs 就可以查阅和发送邮件。 对联系人也是可以直接补全的。 当收到邮件时，还可以和前面org-agenda结合将邮件做一项待办任务，后面再进行处理。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:6:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"结语 emacs是一个存在了 40 多年的自由软件，到现在也还具有强大的生命力，可以预见未来的 40 年也将继续存在。 它是神之编辑器，在 windows 、Linux、 Mac 上都可以使用。 如果感兴趣可以看下陈斌写的《一年成为 Emacs 高手 (像神一样使用编辑器)》 https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org 刚开始上手配置比较困难，可以直接使用他的配置文件： https://github.com/redguardtoo/emacs.d 它的配置文件应该是支持 windows 、mac、 linux 的。 不过后面自己熟悉后，还是可以折腾一份自己的配置，毕竟自己能掌控的才是最好的。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:7:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["工作"],"content":"ID: bdd1836d-9093-4466-a135-b037f1675e4d mtime: 20230211001457 ctime: 20220814214453 “数据是 21 世纪的石油，而分析则是内燃机。” 如果说数据是石油，其本身是无价值的，只有对数据深度挖掘，才能为企业业务增长提供新的引擎，形成真正的数据资产。 近年来，随着信息技术飞速的发展，企业信息化建设已由类似于 ERP 等行业属性相对较强的信息系统建设转向信息系统之上的数据管理与业务应用建设，如建设适应企业业务发展的数据中台、业务中台等新型 IT 架构。通过建设敏捷高效可复用的支撑平台，为业务数字化创新提供高效数据和服务支撑。 IT审计执行的信息系统一般控制、应用控制测试是对企业信息科技领域管控的评价，仍然是对信息系统基础设施及建立其上的业务流程的控制测试。面对企业业务开展所产生的海量数据，其勾勒出了企业经营活动真实画像，数据核查工作在应对舞弊、异常检测方面显得越来越重要。 ","date":"2023-02-10","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:0:0","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"数据核查的特点 ","date":"2023-02-10","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:1:0","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"由抽样审计转变为全量审计 IT审计的数据核查大多时候是为财务审计服务的。受限于技术手段，财务审计在进行数据核查时，往往是抽样审计。但面对类似电商、游戏等这样的互联网企业所产生的海量销售订单，抽样检查多少个合适呢？ 100 个、 1000 个还是 10000 个才合适呢？ 借助于 SQL 、ClickHouse等大数据分析技术，我们可以对上亿行的数据量进行全量核查，全量分析。 例如，对于大型集团企业，审计在执行银行流水与财务序时账核对时一般仅对大额流水进行检查，并且会耗用大量人力和时间。如果企业开通了银企直联，银行流水与序时账一般会有关联字段，我们可以利用 SQL 进行全量双向核对；如果企业未开通银企直联，或没有关联字段，我们仍然可以利用 Python 按照人工核对的逻辑编写代码，实现网银流水与序时账的全量核对，不再区分金额大小。 再如，对于生产工艺复杂的制造型企业，其工序可能多达十几步或者几十步，审计难以对生产成本进行重新计算以验证存货计量的准确性。但对于计算机来说，这些工序的成本分摊逻辑是一致的，借助于 Python ，我们也是可以实现对所有工单的生产成本的归集和分摊进行全量重新计算。对于这些收入、成本计算逻辑复杂的企业，利用 Python 这样的编程语言，复现系统的计算逻辑，能取得很好的数据核查效果。 ","date":"2023-02-10","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:1:1","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"数据分析的颗粒度更小 财务审计在执行分析性程序时，往往使用的数据颗粒度很大，如按年或月的汇总金额去进行波动分析。数据的颗粒度就像一张照片的像素，当颗粒度很大时，照片所呈现的信息将会失真，很多细节信息将难以发现。而 IT 审计进行数据核查时一般按照最小颗粒度的数据进行多维度分析，如订单、小时、分钟、渠道等，这是异常检测的基础。 如上图所示，当我们将订单按照一天 24 小时划分为 24 个区间，分别统计每个小时区间的订单金额时，能发现 2019 年0点和 2020 年8点的订单金额显示异常。这就是将分析的颗粒度变小的好处，能还原更多细节信息。 如上图所示，我们甚至可以按分钟去统计次数，去检测是否存在利用机器人等技术短时间大量刷单的情况。 如上图所示，我们可以以订单的颗粒度去分析单价的稳定性，对于发散的或者偏离正态分布的数据检测出来，进一步去核查异常数据产生的原因。 ","date":"2023-02-10","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:1:2","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"数据核查对象多样化 在大数据时代，几乎所有的人、事、物都能够数据化，进而被分析。 我们将数据核查的对象可以划分为结构化数据和非结构化数据，结构化数据即为能够用数据或者统一结构加以表示的信息，如信息系统中的各种报表。而非结构化数据，就是一些无法用数字或统一的结构表示，如合同、发票、邮件、网页等。 IT审计数据核查的对象不再局限于财务账、业务报表等结构化数据，借助于新的 IT 技术，我们可以将数据核查的范围延伸到非结构化的数据。 如上图所示，审计一家航运企业，以前我们只能通过手工抽样查询船舶定位位置与业务系统中的班期表核对，验证航行的真实性。现在我们可以利用 Python 爬虫技术，批量解析网页中船舶经纬度信息和出发地、目的地，全量核对。 如上图所示，借助于 OCR 技术，我们可以将非结构化的发票图片文件识别成结构化数据，从而实现发票的全量核查。 当然，我们还可以将数据划分为财务数据、业务数据、日志数据三种类型，财务审计在做数据核查时更多核查的是财务数据。而 IT 审计核查的对象会延伸到业务数据和日志数据。 从企业舞弊造假成本来说，=财务数据\u003c业务数据\u003c日志数据=，我们更倾向于通过日志数据、业务数据的核查来验证财务数据的真实性、准确性、完整性。 如上图所示，审计一家制造型企业，我们获取了公司 ERP 系统的操作日志，按天对作业频率进行分析，检查作业频率异常偏高的情况，以排查是否存在舞弊迹象。由于操作日志真实反映了人员的所有系统操作，其数据的可信度相比财务数据更高，能更好地应对舞弊欺诈行为。 总之， IT 审计的数据核查的来源具有多样化的特点。 ","date":"2023-02-10","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:1:3","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"数据核查的方法 IT审计数据核查需要将 IT 技术与审计方法相结合。在信息技术飞速发展的浪潮下，我们需要拥抱新技术、新思想、新变革，同时对我们的审计思路、审计模式进行创新。 审计一家游戏企业，玩家通过充值获得游戏币，游戏币可以在商城中购买游戏道具，购买的道具可以自己使用也可以赠送他人。在审计过程中，我们发现一些账号的充值金额异常大，我们利用 Neo4j 图数据库将所有道具的赠送关系进行网络分析： 我们发现消费金额前 25 名的异常账号，其中就有 19 个账号相互之间有赠送行为，形成了网络。通过进一步审计程序，我们发现其中一些账号是淘宝店家，他们通过从价格更低的渠道充值后，以\"赠送\"的方式卖给游戏玩家，因此其充值金额较大，且存在大量赠送行为。 利用 Neo4j 、Gephi、 NetworkX 等工具，我们可以轻松地进行复杂网络关系分析，挖掘出数据背后的关联关系，这是新技术为我们数据核查带来了新的手段、新的方法。 但 IT 技术仅仅是一种工具，我们在做数据核查时，更多的需要和我们的审计方法论结合、和生活常识结合、和行业经验结合、和统计学知识结合。 例如， IPO 的电商企业的数据核查要求我们 IT 审计对是否存在刷单行为进行分析，从数据分析的工具上讲，我们使用 SQL 就能进行分析，但我们从什么维度去分析能发现是否存在刷单行为呢？ 其实我觉得更好的方法是从生活常识入手，从行业经验入手，我们可以去找参与过刷单朋友，询问他们是如何刷单的，了解其特点，然后再设计数据分析的维度。 例如，我向朋友了解到有的刷单方法是找普通的人去购买，发货的时候只发一个空盒子或者价值较小的重量较轻的东西，完成订单后，再通过微信红包的方式返钱给他。 针对这种刷单方式，我们就可以利用“发货重量轻“的特征去筛选出这些异常订单。我们可以根据商品 SKU 的重量信息，计算出系统里一个订单的重量，再去和物流公司发货时称重重量核对，从而检测出重量偏离较大的异常订单。 当然，这只是一个举例，通过这个例子，我想说明在 IT 审计数据核查过程中分析的思路很多时候比技术手段更加重要。 我们正处在信息爆炸、技术变革的时代，我们应该学习新的 IT 技术，积极探索新的审计方法、审计思路，通过深入挖掘数据背后的价值，提高我们的审计质量、审计效率。 ","date":"2023-02-10","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:2:0","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"在实践中， IT 审计团队通常是和财务审计团队配合完成审计工作的，区别是财务审计是对被审计单位的财务报表及其附注发表意见，而 IT 审计是对信息系统发表意见。 我们所做的工作是通过测试财务报表所依赖的信息系统(包括财务系统和业务系统）的有效性、数据的真实性，证明信息系统环境是否可以信赖。从某种意义上来说， IT 审计是服务于财务审计。 随着财务审计对 IT 审计工作的了解，他们会对 IT 审计提出更多 IT 审计工作范围外的期待。 尤其是在企业信息化浪潮下，受限于技术能力，财务审计团队在数据处理，方法创新方面对 IT 审计团队提出了更高的要求。因此 IT 审计如何更好地辅助财务审计是一个新的课题。 ","date":"2023-02-10","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:0:0","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"利用Python代替繁重计算 在财务审计中存在大量数据处理、数据计算的基础性工作，对于这类有逻辑重复性工作， IT 审计团队可以借助 Python 批量完成。 ","date":"2023-02-10","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:1:0","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"成本还原 对于生产制造业的 IPO 审计项目，成产品的料工费占比是财务审计特别关注的事项。而很多企业采用了逐步结转分步法来核算生产成本，由于每一道工序的半成品将是下一道工序的原材料，所以要计算产成品真实的料工费占比就需要进行成本还原。 如果企业使用的 ERP 系统没有还原后的成本结构报表，同时财务成本会计也未手工编制成本结构报表，那么这项核查工作对于财务审计来说将是巨大的工作量。 对于这类财审提出的需求，我们会了解企业的生产工艺，以及成本还原的计算方法，再利用 Python 编程语言，模拟成本还原的计算过程，将产成品拆分成真实的料工费，从而计算出料工费的占比。 通过 IT 审计团队的辅助，财审团队能完成人工短时间无法完成的工作。 ","date":"2023-02-10","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:1:1","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"保费收入与收款流水核对 在一家保险公司 IT 审计项目中，财审团队需要我们对保费收入与收款流水进行数据核对。 当我们了解到业务中存在大量多个保单对应多个收款流水的情况，对于这种多对多关系，正常是无法批量核对的。 一般情况下，我们核对的数据关系要么是一对一、多对一或者一对多。这三种情况我们写 SQL 语句时都很好处理，只需要将多条数据按单号聚合汇总再进行核对就可以。 这种多对多的关系我们可以借助数学图论中的二分图解决。 比如，我们将这种关系画上线，可以看到其中可以形成一些独立的网络，这里我们将这种网络（用不同颜色标记）简称为组。 我们将独立的网络编上组号，然后将两个数据集的金额分别按组号汇总再进行核对。 示例 Python 代码： class Net(object): def __init__(self): self.setA = { 'A': ['a', 'b', 'c'], 'B': ['d'], 'C': ['b'], 'D': ['a', 'c'], 'E': ['e'] } self.setB = { 'a': ['A', 'D'], 'b': ['A', 'C'], 'c': ['A', 'D'], 'd': ['B'], 'e': ['E'], } self.keys = list(self.setA.keys()) + list(self.setB.keys()) self.groups = {} def split_net(self): num = 0 for key in self.keys: if key not in self.groups.keys(): num += 1 self.loop_net(key, num) def loop_net(self, node, id): if node: self.groups[node] = id if node in self.setA.keys(): sub_nodes = self.setA[node] else: sub_nodes = self.setB[node] for sub_node in sub_nodes: if sub_node: if sub_node not in self.groups.keys(): self.loop_net(sub_node, id) if __name__ == '__main__': net = Net() net.split_net() print(net.groups) 我们借助 Python 构建了类Net,通过 loop_net函数递归找出两个数据集形成的独立网络，从而给独立网络分组，最后我们可以将两个数据集分别按组号聚合后进行核对。 ","date":"2023-02-10","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:1:2","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"利用Python获取外部信息 在财务审计过程中，外部信息的可靠性大于内部信息，因此审计师会查询大量的外部信息与获取的内部信息做交叉验证。 例如，审计一家汽车硬件销售的企业，财务审计团队计划查询销售订单中对应的汽车车架号的信息，核实有没有真实车辆以及车型信息，以及判断查询的外部信息与订单信息是否存在矛盾。 企业 1 年的销售订单有 30 万，依赖审计师人工查询将不太现实。那么，我们 IT 审计团队提出了两种方案： 购买接口，通过 python 调用接口批量获取数据。 编写爬虫，通过 python 编写爬虫获取公开网站数据。 出于节约成本考虑我们选择编写爬虫获取公开信息，用 python 的selenium包，自动查询网站数据，并将结果保存到本地文件。 视频 最后再由财务审计团队对外部信息与内部信息的一致性进行判断。 当然，对于很多公开网站都会有反爬措施，如验证码、访问频率限制、字体混淆等，对于我们 IT 审计团队提出了一定的技术要求。 除此外，财务审计对于外部信息的获取有很大的需求，如同行业财务指标、公司公告、发函快递信息、汇率、交易性金融资产价格等等。 这类需求，随着这几年的发展已有很多成熟的商业网站可以满足，但对于一些特殊的、行业属性较强的小众信息，如果不能批量查询，那么 IT 审计团队就可以辅助财务审计完成信息获取工作。 ","date":"2023-02-10","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:2:0","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"利用IT技术进行方法创新 2020年 6 月24日，证监会依法对獐子岛公司信息披露违法违规案作出行政处罚及市场禁入决定。证监会将渔船的北斗定位信息，通过第三方机构还原出航行轨迹，从而计算出采捕区域面积，进而估算真实成本。 根据这则公开披露的信息，启发了我们利用信息技术的优势，对相关数据进行深入分析挖掘，使审计工作更加智慧、高效。我们 IT 审计团队相对有信息技术的优势，而财务审计团队在财务处理、项目风险识别等方面更有优势，两个团队的良好融合会发挥1+1\u003e2的效果。 对于这类精纬度空间信息，我们可以通过 Python 计算面积、周长、距离。 示例 Python 代码： from pyproj import Geod # 导入Geod类 from shapely.geometry import Point, LineString, Polygon # 导入点、线、多边形类 # 计算封闭区域面积、周长 geod = Geod(ellps=\"WGS84\") # 创建一个WGS84坐标系 polygon = Polygon([(116.169465, 39.932670), (116.160260, 39.924492), (116.150625, 39.710019), (116.183198, 39.709920), (116.226950, 39.777616), (116.442621, 39.799892), (116.463478, 39.790066), (116.588276, 39.809551), (116.536091, 39.808859), (116.573856, 39.839643), (116.706380, 39.916740), (116.600293, 39.937770), (116.514805, 39.982375), (116.499935, 40.013710), (116.546520, 40.030443), (116.687668, 40.129961), (116.539697, 40.080659), (116.503390, 40.058474), (116.468800, 40.052578)]) # 将多个精纬度坐标实例化为Polygon多边形对象 poly_area, poly_perimeter = geod.geometry_area_perimeter(polygon) # 计算多边形面积和周长 print(poly_area, poly_perimeter) # 打印面积和周长 面积:951546279.1726327 周长:183419.43445625657 ","date":"2023-02-10","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:3:0","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"结语 随着新技术、新模式在企业发展过程中不断涌现，财务审计与 IT 审计的融合将会更加紧密。在这样的背景下， IT 审计的工作界限未来可能会更加模糊， IT 审计如何发挥我们的优势辅助财务审计高效、智慧地完成审计工作需要我们共同探索。 ","date":"2023-02-10","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:4:0","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"}]