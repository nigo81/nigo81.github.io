[{"categories":["工作"],"content":"ChatGpt在 2021 年12月的时候刚出来，我就进行注册和试用。 在这两个多月的时间里，它不仅是一个工具，更像一个免费的老师, 辅助我工作。 ChatGPT是由 OpenAI 开发的一种基于大规模预训练的语言模型，它是能够理解语义的。 这点很强大，不像以前我们用过的人工智障机器人。 在会计师事务所，相信大家也被这个破圈的技术所吸引，但还不知道实际工作中能有什么用。 我将分几篇文章，尽量抛砖引玉，激发大家的使用思路。 ","date":"2023-02-25","objectID":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/:0:0","tags":["效率","chatgpt"],"title":"chatgpt在会计师事务所中的运用-审计篇","uri":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/"},{"categories":["工作"],"content":"完成批量处理工作 chatgpt是可以帮你写代码、改代码、查 bug 的，而且非常专业。 而我们审计师以前不会写代码，苦于在 Excel 和Word中进行各种重复操作。 那么现在，我们只需要告诉它我想实现什么功能，你说得越具体，它完成得越好。 例如，我们在编制 Excel 底稿，完成后，需要对每张表的格式进行统一。 以前我们是手工操作，那么现在不需要了。 我们打开浏览器，直接让它帮我写一段 VBA 代码，完成我想要设置的具体格式，直接能生成出我需要的代码。 生成后我们，在 Excel 中打开宏编辑器(快捷键Alt+F11)，选中我们的工作簿名称，点击右键，插入模块。 将代码粘贴过来后，按 F5 运行（也可以通过“视图” - “工具栏” - “调试”，调出调试窗口，点击按钮） 执行后，我们可以看到每张表的格式批量调整了， 但是它好像把我的“审计目标”、“审计过程”以前是红色变成了黑色， 我还是想保留以前的颜色，怎么办？ 我们继续和 chatgpt 对话，让他帮我们搞定： 可以看到，它是能记忆以前对话的内容的，我们可以像和人交流一样，告诉他我的想法就可以。 同样的，我把重新生成的代码粘贴过去，执行一遍。但是我发现，代码执行效率很慢，我又向它提问：“反应时长太长，能否优化下执行效率” 他又重新给我生成了代码。 最后就完成帮我解决了这个问题。 这样是不是将我们以前批量操作的工作，可以自动完成了？爽吧。 作为表哥、表姐的我们一定还能想到很多工具中需要重复处理的事项，你只需要具体说给他，他就可以给你生成 VBA 代码批量完成。 例如，刚刚是调整 Excel 格式，那么我们是不是还可以批量调整 Word 格式？ 每次写报告的时候，我都很烦调格式，尤其是表格的格式，利用这种方式，我相信能节省很多时间。 再比如，合并工作簿、工作表这些操作你都不再需要到处找什么小工具了，它能很好帮你解决。 这个能用到什么程度，取决于你的想象和提问水平。 ","date":"2023-02-25","objectID":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/:1:0","tags":["效率","chatgpt"],"title":"chatgpt在会计师事务所中的运用-审计篇","uri":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/"},{"categories":["工作"],"content":"Excel、Word操作助手 对于审计新人，当 Excel 、Word操作不熟练的时候，它能像老师一样教会你。 ","date":"2023-02-25","objectID":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/:2:0","tags":["效率","chatgpt"],"title":"chatgpt在会计师事务所中的运用-审计篇","uri":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/"},{"categories":["工作"],"content":"问已知函数使用方法 比如，我们可以问一些不熟悉的函数的用法： ","date":"2023-02-25","objectID":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/:2:1","tags":["效率","chatgpt"],"title":"chatgpt在会计师事务所中的运用-审计篇","uri":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/"},{"categories":["工作"],"content":"根据需求问实现方法 假如，有些时候我们连该用什么函数都不知道，只知道我要实现什么功能，也可以把具体描述说给它，让它给我们解决方案: 假设 Sheet1 表中有年龄和员工号两列数，我在 Sheet2 中有一列员工号，需要查找对应的年龄。 我们可以将需求描述给它： 它能够给我们推荐使用函数，但这个结果并不是正确的。熟悉 vlookup 的知道，查找的列需要在第一列，而这个是在最后一列。 那么我们可以继续纠正它： 我们将公式粘贴到 Excel 中： 可以看到完美解决了我的问题，同时它也把具体函数的用法也讲解给我们了。 这其实比你的现场高级别的同事讲解得还清楚些。 ","date":"2023-02-25","objectID":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/:2:2","tags":["效率","chatgpt"],"title":"chatgpt在会计师事务所中的运用-审计篇","uri":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/"},{"categories":["工作"],"content":"私人专业助理 ","date":"2023-02-25","objectID":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/:3:0","tags":["效率","chatgpt"],"title":"chatgpt在会计师事务所中的运用-审计篇","uri":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/"},{"categories":["工作"],"content":"税率问题 前些天在做一家电商项目的 IT 审计，其中需要对订单金额进行测算和核对。 由于计算涉及到欧洲各国的增值税率，但是订单表中没有，我找负责的业务老师，她说她也是网上查的。 好吧，但是我不想一个一个的查，就向 chatgpt 发起了提问： 看样子还不错，但是有些问题： 我需要的一些国家和地区的税率没有列示出来。 给的答案是一段文本，还需要自己去整理成表格。 那么我们，再进一步将需要的所有国家和地区告诉它，让它查，并且只要标准税率，用表格形式展示给我： 这是它返回给我的答案，无论给它中文、英文还是缩写，他都行！ 这样，我可以直接复制粘贴到 Excel ，用 vlookup 就可以将订单表中涉及到不同国家的税率补全了。 ","date":"2023-02-25","objectID":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/:3:1","tags":["效率","chatgpt"],"title":"chatgpt在会计师事务所中的运用-审计篇","uri":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/"},{"categories":["工作"],"content":"专业问题 比如，我不懂怎么现金流量表编制，我可以一步步问它怎么去做，它给的回答如果不具体，你可以继续针对一个小问题让它具体讲解，甚至举例。 不过，很显然，对于这种过度专业的问题，它的回答并没有那么好，可能各训练的数据量有关，甚至会出现一本正经胡说八道的情况，这一点需要仔细判断，不可全信。 即使如此，它能对这些专业问题给出思路和框架，还是很有益的。 ","date":"2023-02-25","objectID":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/:3:2","tags":["效率","chatgpt"],"title":"chatgpt在会计师事务所中的运用-审计篇","uri":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/"},{"categories":["工作"],"content":"结语 本篇针对审计过程中可能用到的方向进行了介绍，限于财务审计工作经验只有两年，可能并不全面和深入，需要读者自己探索。 同时，限于篇幅，上述还只挖掘出 chatgpt 功效的一小部分。 它还有很强大的写作、翻译、摘要等应用场景， 后续针对 IT 审计、咨询方向，也会介绍下可能的应用。 很多地方对于不同方向的工作应该都是有益的。 ","date":"2023-02-25","objectID":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/:4:0","tags":["效率","chatgpt"],"title":"chatgpt在会计师事务所中的运用-审计篇","uri":"/posts/20230225214827-chatgpt%E5%9C%A8%E4%BC%9A%E8%AE%A1%E5%B8%88%E4%BA%8B%E5%8A%A1%E6%89%80%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8_%E5%AE%A1%E8%AE%A1%E7%AF%87/"},{"categories":["工作"],"content":"最近财审同事在做一个专项审计项目，主要是对行业特定补贴进行审计。 我们做 IT 审计团队进行协助，主要完成补贴计算的自动化。 刚开始我向财审同事了解的时候，就感觉这种项目有个特点就是费人。 大大小小的补贴类型有 10 个,每一个类型还需要细分成大概 4 个。 加在一起共计 30-40 个类型。 每一种类型的计算，根据补贴政策如果用 Excel 计算，会非常复杂和麻烦。 单独一个做着可能还行，但一个人要是负责几个，能做下来的话，我是打心眼里觉得真有耐心。 要是中间数导错了，数更新了，需要重新进行，那更是抓狂。 而我们 IT 审计团队则是将每一类计算逻辑，用 python 代码来实现。 说实话，这个工作量也不小。 但，用代码有以下几个好处： 相同逻辑可以复用。 多次审计项目，一次写完，多次复用。 准确率高。 我把所有类型的补贴计算，都抽象成通用函数，放在一个base模块中。 这样，写每一个类型的代码，都可以调用基础模块的函数，这样如果逻辑有变化，我只需要修改基础函数即可，而不用单独去修改每一个补贴计算的代码。这将节省大量时间。 很直观的变化就是，以前需要人工 3 天用 Excel 计算的活，现在用 python 跑，只需要 10 多分钟。 就算中间需要更新数据，重算，也大不了计算机后台算 10 分钟而已。 准确率也不会因为人工的失误或者粗心而出错。 这不经又让我想起，我在初级时和别的部门合作算一个资产证券化的项目，她负责数学建模，我负责用 VBA 编码。 将之前算一次需要 3 个小时，被券商折磨得死去活来的项目，变成改动参数 10 秒出结果。 喝着奶茶，填着工时。 总之，如果你这个工作是一个周期性的重复工作，有计算或操作逻辑，每次又会耗费大量时间，同时又还没有重要得能让公司花钱上系统。 那么，可以考虑使用 Python 这种快速编码，花费一次时间，躺平。 无论是企业或者会计师事务所有这类需求，我们可以合作咨询项目。 我的企业邮箱：tujiabing_cd@shinewing.com ","date":"2023-02-20","objectID":"/posts/20230219233707-python%E5%9C%A8%E6%9C%BA%E5%9C%BA%E8%A1%A5%E8%B4%B4%E4%B8%93%E9%A1%B9%E5%AE%A1%E8%AE%A1%E7%9A%84%E8%BF%90%E7%94%A8/:0:0","tags":["python","IT审计"],"title":"python在涉及复杂运算的专项审计中的运用","uri":"/posts/20230219233707-python%E5%9C%A8%E6%9C%BA%E5%9C%BA%E8%A1%A5%E8%B4%B4%E4%B8%93%E9%A1%B9%E5%AE%A1%E8%AE%A1%E7%9A%84%E8%BF%90%E7%94%A8/"},{"categories":["工作"],"content":"时常别人问我问题，我一般都会说你先去问百度。 因为在我看来，他问的这些问题在网上有丰富的资料，也有现成的答案。 但前几天一位刚入行的朋友，问我一个 Excel 的问题，她描述了一大堆她想要实现的功能。 她说，她自己都不知道该怎么问问题，因为她感觉都不懂，不知如何入手。 突然，我能意识到，刚进入某个陌生领域的时候，可能真的连问题都问不出来。 因为，在这个陌生领域，我只知道我要实现某个目标，而具体所有要做的都完全不懂。 这时，我又会回想起“如何造一枚导弹”这个问题上来，同样的这也是一个复杂的系统工程。 对于普通人来说，你怀着疑问问别人：“我刚入行，不太懂，想问下如何造一门导弹？” 我相信，别人一定会翻你一个白眼，态度好点的会问：“能不能说具体点你的问题？” 你可能会补充到：“我就是想把一枚炸弹，能精确地投送到几千公里以外的地方，在目标点爆炸。\" 没错，我接触到的大部分人都是这么问问题的，我觉得当你这么问的时候，可能压根就没有想实际去解决它。 在很长一段时间，我自己也没有意识到，如何准确问问题也是一种能力，这种能力是我们缺失的，它叫分解能力。 ","date":"2023-02-12","objectID":"/posts/20230212195147-%E5%A6%82%E4%BD%95%E5%88%B6%E9%80%A0%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9/:0:0","tags":["效率"],"title":"如何制造一枚导弹","uri":"/posts/20230212195147-%E5%A6%82%E4%BD%95%E5%88%B6%E9%80%A0%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9/"},{"categories":["工作"],"content":"分解能力 一枚导弹说到底就一个炸弹，顶部装着炸药的战斗部，而要送到几千公里外，就需要燃料，也就是推进系统。当然要想准确送到目的地，就还需要导航系统、姿势控制系统等。最后还需要承载着以上系统的外壳主体。 你看这个大的问题可以拆分成小的问题。当然，对于这种庞大的系统工程来说，还需要不停地进行拆分。 例如导航问题，在正常环境下可能使用卫星定位，但在有卫星信号弱时可能会使用惯性导航，那么这个问题又可以拆分下去。 当然，以上的拆分应该达到工程上可执行的地步，否则你告诉别人把大象装进冰箱只需要三步一样，没有太多的意义。 对于一名工人来说，问题最后可能已经拆解为“如何生产某个材质、某个尺寸的螺丝钉？”。 当你向一名老工人问出这种问题的时候，别人一般是可以帮你解答的。 所以，我们的问题应当分解为可执行的层面，这才是有意义的。 ","date":"2023-02-12","objectID":"/posts/20230212195147-%E5%A6%82%E4%BD%95%E5%88%B6%E9%80%A0%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9/:1:0","tags":["效率"],"title":"如何制造一枚导弹","uri":"/posts/20230212195147-%E5%A6%82%E4%BD%95%E5%88%B6%E9%80%A0%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9/"},{"categories":["工作"],"content":"整合能力 以前上军事课，老师说“战斗力是什么？战斗力就是人、武器、以及人和武器的结合。” 你看，单独的两个系统间，他们的结合也都会是重要的一部分。 当我们将一个问题或系统分解成一个个子问题或子系统后，在分别解决子问题后，还需要考虑他们之间的融合。 而这种整合往往在建设之初就会考虑。系统与系统间是如何协调、如何通信、如何作用的？ 这种整合能力很多时候，比某个单个系统的性能更重要。 以我们建设国产大飞机为例，当我们战略上决定要建设自己的大飞机时，我们可能很多方面都是空白的。 也许有人说，发动机最重要，我们先突破发动机。 也许有人说，我们航空材料不行，我们先突破材料。 也许有人说，控制系统不行，我们先建设控制系统。 这和我们面对一个陌生领域是一样的不知所措。那么国家是怎么做的呢？ 什么都不会，那我们先做组装吧，就像玩乐高一样，我造不出来的就进口，在组装的过程中，我才可能了解整个建设流程、环节。 才可能了解到具体我是有哪些缺失，以及其重要性，及后续发展的先后顺序。 当我们一无所知，先了解整个大系统的框架，搞清楚整个流程，然后再去分解，逐步突破每一个模块。 其实想想我们的航母也是这样的，先买下瓦良格号，有了整个船体和建造图纸，再去突破整细节。 这就是先有了整合能力，再有了分解能力。 ","date":"2023-02-12","objectID":"/posts/20230212195147-%E5%A6%82%E4%BD%95%E5%88%B6%E9%80%A0%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9/:2:0","tags":["效率"],"title":"如何制造一枚导弹","uri":"/posts/20230212195147-%E5%A6%82%E4%BD%95%E5%88%B6%E9%80%A0%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9/"},{"categories":["工作"],"content":"个人的选择 对于一个复杂系统，个人是无法全部完成的。 往小了说一点，一个项目、一单生意，每个人应该清楚自己的能力和位置。 现实生活中并不需要每个人精通各个环节，这对现代社会分工来说，也是不可行、效率低下的。 比如，在事务所，一个项目，你有客户资源，有品牌，有售前能力，有承做能力。 这一切都有了，那还打工个毛线，早自己单干了。 那么一定是有这个平台你所不具备的。 对于每个人来说，其实要做的更多的是将自己的长处无限放大,让自己在分解任务中的某个领域成为绝对的专家，而不是去补齐短板，成为每个环节的普通人，除非自己有整个系统的整合能力这种不可或缺的能力。 现实生活中又不是学生时代的考试，你可以将分解任务外包。 比如，你有客户资源，那么你可以将承做外包出去，让别人做。 如果你有团队，具备承做能力，也可以利用平台的资源生存。 同样的，如果是项目经理，那么你也可以将任务分解，将具体环节外包给同事，而自己负责整个项目的整合。 最后，如果自己在学习某个具体的知识领域，再没有可以外包的了，也应该利用整合+分解能力，逐个击破，最终掌握。 当然，最好能形成T字型的知识结构，能在某一方面成为绝对的专家，这样才能参与到更大的系统建设或者社会分工中。 ","date":"2023-02-12","objectID":"/posts/20230212195147-%E5%A6%82%E4%BD%95%E5%88%B6%E9%80%A0%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9/:3:0","tags":["效率"],"title":"如何制造一枚导弹","uri":"/posts/20230212195147-%E5%A6%82%E4%BD%95%E5%88%B6%E9%80%A0%E4%B8%80%E6%9E%9A%E5%AF%BC%E5%BC%B9/"},{"categories":null,"content":"个人介绍 我的昵称是nigo，一条逆行的狗。 毕业于国防科学技术大学，注册会计师，边防连队任职步兵排长 3 年，复员后从事财务审计 2 年，此后从事 IT 审计至今。 个人利用擅长 python 、sql、 clickhouse 等技术进行数据分析。 爱好折腾 Linux 、emacs。 ","date":"2023-02-11","objectID":"/about/:1:0","tags":null,"title":"个人介绍","uri":"/about/"},{"categories":null,"content":"微信公众号 2018年 4 月开通微信公众号：逆行的狗，记录平时审计工作中所思、所学、所想。 最开始写过一堆用于审计的 VBA 工具，认识了一些志同道合的朋友。 平时发文较多的主要是在微信公众号上。 ","date":"2023-02-11","objectID":"/about/:2:0","tags":null,"title":"个人介绍","uri":"/about/"},{"categories":null,"content":"BiliBili 在 B 站的账号是nigo81，有时会录制一些关于 python 、sql、 Linux 相关的视频。 ","date":"2023-02-11","objectID":"/about/:3:0","tags":null,"title":"个人介绍","uri":"/about/"},{"categories":null,"content":"出版物 在工作期间在电子工业出版社出版过两本书，每本书都在 B 站上传了对应的配套视频。 《审计效率手册》 《 IT 审计：用SQL+Python提升工作效率》 虽然自己不是什么专家，但平时工作中比较喜欢学习和思考，所以写作对自己来说也就是学习和思考的输出，这对我是非常有益的。 ","date":"2023-02-11","objectID":"/about/:4:0","tags":null,"title":"个人介绍","uri":"/about/"},{"categories":["生活"],"content":"写公众号写了几年，很多历史文章在微信上查看并不方便，毕竟是个封闭的系统。 今天用 hugo 在github上搭建了个免费的博客，搭配着 emacs 中的 ox-hugo 插件，可以一键发布到博客。 由于平时也是使用的 emacs 写公众号文章，所以顺便也就可以发布在博客上了。 今天把 2022 年8月以来的文章都迁移到博客上了，之前的文章也会陆续迁移。 这样也方便大家能够搜索或者使用 RSS 订阅。 博客地址：https://nigo81.github.io/ 参考文章： 21天学会 Emacs ：第 11 天使用org mode写博客_哔哩哔哩_bilibili 主题文档 - 基本概念 - LoveIt ox-hugo - Org to Hugo exporter 利用 GitHub-Actions 将Hugo博客自动发布到 GitHub 和Gitee Pages - 简书 结合Github Action实现自动上传 Algolia 索引 - 凡梦星尘 ","date":"2023-02-11","objectID":"/posts/20230211232820-%E6%96%87%E7%AB%A0%E8%BF%81%E7%A7%BB%E5%88%B0%E5%8D%9A%E5%AE%A2/:0:0","tags":["效率"],"title":"文章迁移到博客","uri":"/posts/20230211232820-%E6%96%87%E7%AB%A0%E8%BF%81%E7%A7%BB%E5%88%B0%E5%8D%9A%E5%AE%A2/"},{"categories":["效率"],"content":"作为重度知识使用者，我使用过很多笔记软件。 包括为知笔记、印象笔记、 gingko 、vimwiki。 其中停留在 vimwiki 的时间比较长，它是编辑器之神 vim 的一个插件，用它积累了很多学习、工作的笔记，全部是本地的 makrdown 文件，共享盘同步。 从去年 8 月开始，用上了 emacs ，这个被称为神之编辑器的东西，确实让人上瘾，几乎可以用它来做任何事情。 这个编辑器不仅属于程序员，其实很多国外学术圈的人也很多人使用。 目前我使用它记录笔记、工作安排、 GTD 、写 Python 、写公众号、听收音机、发邮件、读 RSS 。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:0:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"读书笔记 在看书时，可以方便地一边记笔记、一边看 PDF ，可以全部使用键盘。 使用dictionary-overlay插件，可以在阅读英文时，遇到不懂的单词可以直接标注，后面再次出现也会显示中文。 使用popweb插件可以直接实时查有道词典。 搭配着这两个插件，基本上我也不怕读英文文档了。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:1:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"org-mode emacs最强大的就是 org-mode ，可以方便组织文字、图片、链接 每一层级可以方便的折叠，展开，非常有逻辑性。 同时，对于学习代码来说，他还可以直接运行，因此我们可以进行文学编程。 只需要在代码块中按下C-c C-c就可以将代码结果运行出来。 如果你喜欢双链笔记，可以使用org-roam插件。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:2:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"编写代码 搭配上lsp-bridge插件，可以瞬间变成一个成熟的 IDE ，尤其是如果平时要写多个语言，那么在一个编辑中写书，更高效。 毕竟快捷键都是一套自己熟悉的。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:3:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"GTD org-agenda 是非常强大的任务管理插件。 在工作时，如果有一项任务来临，按下C-c c就可以弹出记录。 输入待办事项、开始时间或结束时间、重要程度 也可以使用番茄钟等对任务的时间消耗进行记录。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:4:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"RSS 可以订阅自己喜欢的一些博客文章或者播客、 B 站关注的 UP 主。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:5:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"邮件 最近也把邮件客户端省了，打开 emacs 就可以查阅和发送邮件。 对联系人也是可以直接补全的。 当收到邮件时，还可以和前面org-agenda结合将邮件做一项待办任务，后面再进行处理。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:6:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["效率"],"content":"结语 emacs是一个存在了 40 多年的自由软件，到现在也还具有强大的生命力，可以预见未来的 40 年也将继续存在。 它是神之编辑器，在 windows 、Linux、 Mac 上都可以使用。 如果感兴趣可以看下陈斌写的《一年成为 Emacs 高手 (像神一样使用编辑器)》 https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org 刚开始上手配置比较困难，可以直接使用他的配置文件： https://github.com/redguardtoo/emacs.d 它的配置文件应该是支持 windows 、mac、 linux 的。 不过后面自己熟悉后，还是可以折腾一份自己的配置，毕竟自己能掌控的才是最好的。 ","date":"2023-02-10","objectID":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/:7:0","tags":["emacs"],"title":"让人上瘾的emacs","uri":"/posts/20230205232142-%E8%AE%A9%E4%BA%BA%E4%B8%8A%E7%98%BE%E7%9A%84emacs/"},{"categories":["工作"],"content":"随着个人信息保护法等相关法律的出台，以电商为代表的互联网平台加强了个人信息保护。 以前导出的订单信息中，包含有个人信息，后面就加上了掩码了。 最近做的一个项目，天猫平台导出订单，直接连字段都没有了， 什么昵称、姓名、 ID 、电话、详细地址统统没有。 首发问答 54 条第 53 问，又明确让 IT 审计进行数据分析。 这还分析个毛啊。 其实以前相关字段有掩码，还可以用昵称+电话或者地址什么的拼一个代表用户的唯一 ID 。 现在就没了，没法了。 咨询了一些其它项目，发现有些店铺是可以导出的，有些店铺是无法导出的。 可能和店铺类型有关。 目前通过请教同事我唯一能想到的办法是： 用管理员账号导数。 有些信息普通账号导不出来，管理员账号就可以导出来。 利用能利用的数据拼。 订单里没有，看能不能用发货的地址等信息替代购买人。如果连发货等其他数据导出来都没有用户信息，可能没法了。 记得上条，用管理员账号导。 网上搜索上有没有平台固有的订单规律。 同事告诉我，天猫平台同一个用户订单后 6 位是相同的，我打开自己淘宝一看，惊奇发现真的我近一年买的商品订单后 6 位是相同的。 这个数字相当于就是一个用户 ID 了。 不过没有官方的公开规律，不知道是否可用。 最后，我想说请监管机构也学习下个人信息保护法，不要在问询函中问这种问题了。 臣妾 审计师做不到。 ","date":"2023-02-02","objectID":"/posts/20230202232727-%E7%94%B5%E5%95%86ipo%E9%A1%B9%E7%9B%AEit%E5%AE%A1%E8%AE%A1%E4%B8%AD%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%BC%BA%E5%A4%B1%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/:0:0","tags":["IT审计"],"title":"电商IPO项目IT审计中个人信息缺失解决办法","uri":"/posts/20230202232727-%E7%94%B5%E5%95%86ipo%E9%A1%B9%E7%9B%AEit%E5%AE%A1%E8%AE%A1%E4%B8%AD%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%BC%BA%E5%A4%B1%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"categories":["工作"],"content":"年前，财审经理丁老师发了我他们一位中级同事黄老师做的一个自动化工具，让我帮忙看看。 年前太忙了，一直拖到了今天晚上才看，实在不好意思。 这个工具解决的问题就是利用按键精灵实现用友 NC 系统批量自动导出科目余额表、序时账、辅助科目余额表。 对于主体上百家的企业来说，如果客户只是给账号，需要自己导数的时候，就能明白这多有用了。 这个操作是什么？不就是 RPA 嘛，反正这些名词换来换去，实质都一样。 发我的压缩包里有： 详细的操作教程视频。 操作步骤文档。 RPA脚本。 连操作过程中可能遇到的问题都在视频中进行了提示，真的很用心了，太优秀了。 除了牛逼之外，我更想说爱思考的人真帅。 爱思考，是种面对问题，主观去改进现状，解决问题的牛逼技能。 绝大部分人是缺失这种能力的。 如果导数要导三天，大家可能都宁愿老老实实不费脑子地导三天。 而爱思考的可能宁愿花一周，找一种更优的方法，却能解决更长久的问题。 也许你会说这同事电脑水平高，我更认同是更具有创造力。 这种能力是可迁移的，优秀的人往往是多方面优秀。 我说：“丁老师呀，让黄老师来我们部门吧。” 丁老师过了一分钟才回复我说：“他 cpa 也考完了，舍不得。”感觉我要抢他宝贝一样。 最后我想说黄老师牛逼，爱思考的人真帅！ ","date":"2023-01-30","objectID":"/posts/20230130232842-%E7%88%B1%E6%80%9D%E8%80%83%E7%9A%84%E4%BA%BA%E7%9C%9F%E5%B8%85/:0:0","tags":["审计"],"title":"爱思考的人真帅","uri":"/posts/20230130232842-%E7%88%B1%E6%80%9D%E8%80%83%E7%9A%84%E4%BA%BA%E7%9C%9F%E5%B8%85/"},{"categories":["生活"],"content":"我的假期今天结束了， 每天睡到 9 点过，大概有四五天去陪了爷爷，尽量在他最后的日子里多看看他。 生命终有尽头，人人皆须面对。 窗外人世间纷纷扰扰，屋内两老人孤孤单单。 其实作为从小在外读书的我来说，和爷爷婆婆待的时间很少， 以至于坐一起，也并没有太多的话， 以前爷爷身体好的时候，话题最多的时候就是他试图教我算命和风水。 每天就是带着两个孩子一起去看看他们， 有一天，涵涵带着楼下买的“消消乐”游戏卡片，三张相同的就可以消除，看谁最后剩下的卡片最少。 婆婆看到涵涵在玩，就过来和他一起玩， 对于成年人来说可能会感觉无聊的游戏，但婆婆和涵涵玩了一下午。 当时就有点感慨，不知是“老还小”还是每天真的太孤单无聊了。 晚上我问涵涵，今天你和祖祖谁赢了，他说：“祖祖牛逼惨了，一直赢，运气太好了。” 人随着年纪的增长，会觉得一年的时光过得越来越快， 小时候，如果我 5 岁，一年就是我人生的1/5，一年的时间好长，好长。 人大了，一年的时光只是人生的几十分之一，时间好快，好快。 其实，现实的当下永远是最好的时光，它承载着过去，延续着未来。 自己应当勇敢去做自己想做的事，不怕失败，不怕困难，不怕嘲笑。 其实除了生死健康之事，其它没有什么大不了的，这只是起点到终点的过程罢了， 唯有随心而活，快意逍遥，这才可能不留遗憾， 而不是拿着别人给你设计好的剧本，进行长达几十年的演出。 新年尹始，希望所有人身体健康， 我自己愿望是学有所成，努力赚钱。 ","date":"2023-01-27","objectID":"/posts/20230127223229-%E4%B8%80%E7%82%B9%E6%9D%82%E6%83%B3/:0:0","tags":["杂文"],"title":"一点杂想","uri":"/posts/20230127223229-%E4%B8%80%E7%82%B9%E6%9D%82%E6%83%B3/"},{"categories":["工作"],"content":"今天，有同事让生成下 2022 年陈版主答疑汇编，好的，安排。 既然生成了答疑汇编也做一个小小的总结。 (注：以下分析仅依据记录 cpa 业务探讨版块版主回答的帖子） ","date":"2023-01-11","objectID":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/:0:0","tags":["sql","审计"],"title":"2022年中国会计视野论坛答疑总结","uri":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/"},{"categories":["工作"],"content":"全年话题数及回答数 -- 回答数 select count(*) from chenyiwei_bbs where year(comment_time)=2022; -- 话题数 select count(distinct link) from chenyiwei_bbs where year(comment_time)=2022; 全年回答了 5086 个话题，共计 6286 次回复。 ","date":"2023-01-11","objectID":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/:1:0","tags":["sql","审计"],"title":"2022年中国会计视野论坛答疑总结","uri":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/"},{"categories":["工作"],"content":"回答数量月度分布 select month(comment_time) 月份,count(*) 回答数量 from chenyiwei_bbs where year(comment_time)=2022 group by month(comment_time) order by month(comment_time) 月份 回答数量 1 513 2 339 3 662 4 557 5 470 6 486 7 583 8 477 9 574 10 512 11 547 12 566 ","date":"2023-01-11","objectID":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/:2:0","tags":["sql","审计"],"title":"2022年中国会计视野论坛答疑总结","uri":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/"},{"categories":["工作"],"content":"回答数量小时分布 这里我们分别按提问时间和回答时间统计各小时区间的数量： -- 回答小时分布 select hour(comment_time) 小时,count(*) 回答数量 from chenyiwei_bbs where year(comment_time)=2022 group by hour(comment_time) order by hour(comment_time) -- 提问小时分布 select hour(question_time) 小时,count(*) 提问数量 from chenyiwei_bbs where year(comment_time)=2022 group by hour(question_time) order by hour(question_time) 小时 回答数量 提问数量 0 141 89 1 174 45 2 278 16 3 281 6 4 374 3 5 262 2 6 164 28 7 39 29 8 14 140 9 93 403 10 341 654 11 475 535 12 343 272 13 191 285 14 352 474 15 492 501 16 528 583 17 477 514 18 337 310 19 226 245 20 165 315 21 151 304 22 152 308 23 236 225 通过提问人和回答人的小时分布对比就知道和大佬之间的差距。 ","date":"2023-01-11","objectID":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/:3:0","tags":["sql","审计"],"title":"2022年中国会计视野论坛答疑总结","uri":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/"},{"categories":["工作"],"content":"回答数量最多日期TOP5 select date_format(comment_time,'%Y-%m-%d') 日期,count(*) 回答数量 from chenyiwei_bbs where year(comment_time)=2022 group by date_format(comment_time,'%Y-%m-%d') order by count(*) desc limit 5; 日期 回答数量 2022-06-30 67 2022-02-22 54 2022-11-27 51 2022-12-22 51 2022-11-15 51 630亮了 ","date":"2023-01-11","objectID":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/:4:0","tags":["sql","审计"],"title":"2022年中国会计视野论坛答疑总结","uri":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/"},{"categories":["工作"],"content":"工作天数 select count(distinct(date_format(comment_time,'%Y-%m-%d'))) 日期 from chenyiwei_bbs where year(comment_time)=2022 全年回贴共计 271 天，要知道 2022 年也就 248 个工作日。 ","date":"2023-01-11","objectID":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/:5:0","tags":["sql","审计"],"title":"2022年中国会计视野论坛答疑总结","uri":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/"},{"categories":["工作"],"content":"提问最多Top5 select question_author 提问人,count(*) 对话数 from chenyiwei_bbs where year(comment_time)=2022 group by question_author order by count(*) desc limit 5; 提问人 对话数 liuweisheng 213 Ryan_q 87 yjhly2011 56 zhs7403 43 天之蓝2022 42 其实能思考提出这么多问题的也是大佬。 ","date":"2023-01-11","objectID":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/:6:0","tags":["sql","审计"],"title":"2022年中国会计视野论坛答疑总结","uri":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/"},{"categories":["工作"],"content":"热门提问词汇 查询出全年提问标题： select distinct(title) from chenyiwei_bbs where year(comment_time)=2022 导出成 txt 文件，并用 Python 进行分词，取频率前 200 词汇绘制词云图。 读完数据，只有佩服。 ","date":"2023-01-11","objectID":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/:7:0","tags":["sql","审计"],"title":"2022年中国会计视野论坛答疑总结","uri":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/"},{"categories":["工作"],"content":"下载地址： https://wwds.lanzoum.com/b01nyhiod 密码:1mki ","date":"2023-01-11","objectID":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/:8:0","tags":["sql","审计"],"title":"2022年中国会计视野论坛答疑总结","uri":"/posts/20230111235048-2022%E5%B9%B4%E4%BC%9A%E8%AE%A1%E8%A7%86%E9%87%8E%E8%AE%BA%E5%9D%9B%E7%AD%94%E7%96%91%E6%80%BB%E7%BB%93/"},{"categories":["工作"],"content":"在 IT 审计的数据分析中，如果数据量稍微大点，获取数据我们一般都是 csv 文件。 如果客户给了很多 Excel 文件，我一般也会批量转成 csv 文件合并成一个， 再将数据导入到 Mysql 数据库中。 我自己在导完数后，一般会对行数进行校验，看原文件多少行，以及导入数据库多少行，确认数据导入正确。 昨天我发现导入数据库后的行数比 CSV 文件行数少，且没有报错。 其实之前我也遇到过两次这种问题，但当时数据量是上亿行和千万行，实在难以找到原因。 昨天的一个数据只有 4 万行，为了了解原因，用二分法经过大概 20 次数据对比，肉眼找到出问题的那行。 发现原因是字段内有换行符 。 ","date":"2023-01-10","objectID":"/posts/20230110221307-mysql%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6%E5%B0%91%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%B4%A2/:0:0","tags":["sql","IT审计"],"title":"mysql导入csv文件少行原因探索","uri":"/posts/20230110221307-mysql%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6%E5%B0%91%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%B4%A2/"},{"categories":["工作"],"content":"换行符 这里我们举一个例子： 这张表里有两行数据，其中第二行“商品名称”中有换行符。 我们将数据导入到 mysql 数据库会看到也是只有两行 但是你用命令行wc -l查看数据行数或者用记事本打开就会有 4 行数据： 这就是为什么我们查看 csv 的行数比我们导入数据库中的行数多的原因。 那么我们看看解决方法。 ","date":"2023-01-10","objectID":"/posts/20230110221307-mysql%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6%E5%B0%91%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%B4%A2/:1:0","tags":["sql","IT审计"],"title":"mysql导入csv文件少行原因探索","uri":"/posts/20230110221307-mysql%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6%E5%B0%91%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%B4%A2/"},{"categories":["工作"],"content":"去除CSV文件中的换行符 我们可以使用 pandas 库读取 csv 文件，并用 replace 函数将换行符\\n替换为空。 import pandas as pd df = pd.read_csv('数据.csv') df = df.replace('\\n', '', regex=True) df.to_csv('数据_new.csv',index=False) 可以看到输出的文件中换行符被替换了。 当然，一般我们处理的数据会非常大，如果这样一次性读取会超过电脑内存，这时我们可以使用分块读取，分块处理。 import pandas as pd def replace_newlines(input_file, output_file): chunksize = 10**6 #1MB flag = True for chunk in pd.read_csv(input_file, chunksize=chunksize, engine='python'): # Process each chunk chunk = chunk.replace('\\n', '', regex=True) # write the chunk to the output_file if flag: chunk.to_csv(output_file,mode='w',header=True,index=False) flag = False else: chunk.to_csv(output_file,mode='a',header=False,index=False) if __name__ == \"__main__\": replace_newlines('数据.csv','数据_pandas.csv') 我们可以看到数据也被正确处理了，当然，这里没有拿大数据来演示。 ","date":"2023-01-10","objectID":"/posts/20230110221307-mysql%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6%E5%B0%91%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%B4%A2/:2:0","tags":["sql","IT审计"],"title":"mysql导入csv文件少行原因探索","uri":"/posts/20230110221307-mysql%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6%E5%B0%91%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%B4%A2/"},{"categories":["工作"],"content":"去除Excel文件的换行符 如果给的 Excel 文件，需要转成 CSV 文件，那么你仍然可以使用上面 pandas 的处理方法，区别只是读取 csv 文件变成了读取 excel 文件。 使用pd.read_excel()即可读取 Excel 文件。如果想输出成 Excel ，可以使用pd.to_excel()即可。 当然，我们还可以使用更简单的方法。 python有个xlsx2csv库，可以直接将 Excel 转成 csv 文件。 安装方法： pip install xlsx2csv 我们可以看到直接这样转换， csv 文件中还是会有换行符。 通过xlsx2csv --help可以查看帮助文档。 我们可以看到有两个参数可以使用： -e :会将\\r\\n\\t等符号变成字符串。 --no-line-breaks ：会将换行符替换成空格。 （注： windows 换行符为\\r\\n， Linux 换行符为\\n) 因此我们只需要使用这两个参数即可。 ","date":"2023-01-10","objectID":"/posts/20230110221307-mysql%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6%E5%B0%91%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%B4%A2/:3:0","tags":["sql","IT审计"],"title":"mysql导入csv文件少行原因探索","uri":"/posts/20230110221307-mysql%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6%E5%B0%91%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%B4%A2/"},{"categories":["工作"],"content":"结语 其实昨天如果不是为了找这个原因，也可以手工一个一个 excel 去导入。 但这样其实自己是没有任何收获的。 4万多行，二分法肉眼才找到出问题那行。 耗费了一晚上研究清楚这个问题产生原因，将来各种情况的解决方法，无疑以后再次遇到的时候将直接上手解决。 重剑无锋，大巧不工。 ","date":"2023-01-10","objectID":"/posts/20230110221307-mysql%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6%E5%B0%91%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%B4%A2/:4:0","tags":["sql","IT审计"],"title":"mysql导入csv文件少行原因探索","uri":"/posts/20230110221307-mysql%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6%E5%B0%91%E8%A1%8C%E5%8E%9F%E5%9B%A0%E6%8E%A2%E7%B4%A2/"},{"categories":["工作"],"content":"最近项目上的活已经干不过来了。 已经没有人了，我自己开底稿也开了两周了，接下来还得继续开底稿，项目已经堆在一起了。 不管多忙，我一直有一个感觉，如果忙到每天只有输出的话，这样你会发现自己会长时间陷入一种停滞状态。 就是你不断在做项目，但你可能成长很少。 只有你花时间把输入和输出结合起来的时候，这段时间一定是你进步最大的。 工作是干不完的，一直不停输出，基本上你只是一台机器，你所输出的没有总结、复盘、反馈、提升。 所以，无论怎么忙，做项目一定要抱着学习的态度，心里想着我从这个项目上能学习到什么。 哪怕实在忙得不行了，一点时间都没有了，也应该想想如何取舍和摸鱼，也就是所谓的要把有限的审计资源投入到风险最大的地方。 做项目虽然是打工、搬砖，但一定要给自己打工、给自己搬砖。 通过这个项目我要能获取到知识、经验，哪怕这就是一个平平无奇，自己做过很多次的项目，也应该想想这次我可以从哪些方面做些以前没注意到的事，增加自己的知识和能力。 其实，这种为自己打工的态度挺受用的， 因为无论怎么干，你获取到的工资都是一样的， 但有了这种思路，你会收获到任何人都剥夺不了你的技能，而这些技能是通用的，将来你无论在哪里都还用得上。 也许，就也就是一种收获， 同时，输入+输出的循环作用下，自己不断的思考、加工，你会发现这段时间是自己进步最大的时候。 而不带任何思考的不断为完成工作的输出，只能是单纯贩卖自己的时间换取微薄的工资，做一台不断折旧的机器。 ","date":"2023-01-02","objectID":"/posts/20230102231959-%E5%BF%99%E5%AD%A3%E6%9D%A5%E4%BA%86/:0:0","tags":["杂文"],"title":"忙季来了","uri":"/posts/20230102231959-%E5%BF%99%E5%AD%A3%E6%9D%A5%E4%BA%86/"},{"categories":["工作"],"content":"2022年结束了，总体来讲，这一年我不太满意。 进步较少，迷惘较多。 以下对 2022 年初的目标进行复盘，以及对 2023 年计划进行设定。 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:0:0","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"技术方面 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:1:0","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"2022年目标完成情况 学习掌握精通 clickhouse 大数据分析 这个目标已完成，并在实际项目上得到了运用。在做一个游戏公司的 IT 审计过程中，在我自己 5000 元的笔记本上也能处理亿级数据量。 只要硬件环境足够，处理 T 级数据量不在话下。虽然所里没提供服务器，但去年我自己也买了一台 2 万的台式机，利用 clickhouse 数据处理能力基本上足够了。 学习掌握Vue+Django网页全栈开发 没有完成目标。只掌握了用 Django 写后端的技术，还未掌握前端框架 Vue 。 主要原因是平时工作上用不上。学习动力不足，也有点畏难心理。 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:1:1","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"2023年目标设定 考 oscp 证书 之前一个项目上接触了漏洞扫描和渗透测试，发现自己对信息安全知识还比较薄弱，打算通过考试系统学习下渗透测试。 oscp(进攻性安全专家认证)，考试也没有笔试， 6 台主机， 24 小时攻入拿到最高权限，然后 24 小时写报告。 计划 2023 年6月前通过考试。 学习掌握Vue+Django网页全栈开发 继续完成去年没有完成的任务，还是先动手写一个简单的网页上手，比如做一个内部用的招投标信息收集的网站。 用scrapy+gerapy获取平时目标网站的招投标信息，用vue+django写个网站可以前台检索看。 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:1:2","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"阅读方面 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:2:0","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"2022年目标完成情况 计划全年读 6 本书已完成，已读的书有： 《底层逻辑》 《一个数学家的叹息》 《暗时间》重读 《父与子》 《这书能让你戒烟》 《 Neo4j 权威指南》 《数字化审计实务指南》 《 ClickHouse 原理解析与应用实践》 《共产党宣言》 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:2:1","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"2023年目标设定 照旧计划全年读 6 本书 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:2:2","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"投资方面 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:3:0","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"2022年目标完成情况 账户市值到 100 万未达成，主要计算的时候把帮父母买的钱算进去了，今年他们拿去买房了。 今年亏损 8 万，账户还剩 55 万。 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:3:1","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"2023年目标设定 账户市值到 80 万。 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:3:2","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"写作及自媒体方面 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:4:0","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"2022年目标完成情况 年初关注人数：58,291人。年末关注人数：71,823人。 离计划的 8 万人差距不小，主要还是公众号已经没落了，微信公众号整体都在走下坡路，大家刷短视频的时间更多。所以，现在关注人数之类的已经不重要了。 今年 6 月出版了新书《 IT 审计:用SQL+Python提升工作效率》。 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:4:1","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"2023年目标设定 维持公众号平均四五千的阅读率就好了。 和林铖再把《审计效率手册》里面的内容更新下，出第二版。 B站偶尔更新下平时自己学习的内容。 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:4:2","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"遛娃及健康 平时工作、出差比较多，陪娃的时间比较少，感觉也很难做到了。 11月买了辆自行车，开始骑行锻炼，不过最近一个月都在出差，也有一个月没有骑了。 2023年全年计划至少骑行 1500KM 。降低体脂率，保持比较健康的身体。 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:5:0","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"结语 2022年已过，留下了不少困惑、遗憾，不过幸运的是全家身体都健康，也没什么灾难。 2023年，继续打工挣钱，学习屠龙技，保守平常心，练就金刚身，不惧艰难事。 ","date":"2022-12-31","objectID":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/:6:0","tags":["杂文"],"title":"2022年总结和2023年计划","uri":"/posts/20221231214704-2022%E5%B9%B4%E6%80%BB%E7%BB%93%E5%92%8C2023%E5%B9%B4%E8%AE%A1%E5%88%92/"},{"categories":["工作"],"content":"我们部门一部分业务是 IT 审计，平时是需要用到 Python 的。 这个东西是需要动手写的，光看、光听是学不会的。 前面财审同事做一个项目，需要计算机场补贴，这中间涉及到大量条件判断，用 Excel 人工非常耗时。 我们协助去写些自动化的 Python 工具，实现自动化批量计算。 给想学的同事都布置了任务，希望能从解决问题的过程中学习。 另外， 去年同事列了 60 多个招标网站的爬虫需求，想每天自动获取信息，然后把与我们服务相关的信息发送邮件到领导那里。 同事之前用 requests 库写了爬虫，但毛病是每次还得开了机才能运行，而且还是只能运行在 windows 上运行。 由于换了她 mac 电脑，之前的居然无效了。 这种大量爬虫正常逻辑应该是用 scrapy 框架写，然后用爬虫管理系统如 gerapy 、scrapy web等做定时任务，放在那里就不用管了。 周末花时间根据这个案例，录制了 2 个多小时的视频，上传到 B 站，希望大家能空闲的时候能动手写下。 遇到任何不懂的东西，具备动手学、动手干，是非常了不起的本事。 绝大部分人倒在第一步。 “三年天下无敌，十年战战兢兢” 迈过第一步，刚开始会觉得自己天下无敌， 随着知道的越多，才发现自己不行。 这需要自己不断地学习，更深入的学习，让自己更专业。 少说空话，动手干，比什么都强。 ","date":"2022-12-11","objectID":"/posts/20221211223131-%E5%8A%A8%E6%89%8B%E5%B9%B2/:0:0","tags":["效率"],"title":"动手干","uri":"/posts/20221211223131-%E5%8A%A8%E6%89%8B%E5%B9%B2/"},{"categories":["生活"],"content":"有时感到生活就是日复一日， 一天到头，屁事没干， 还会不停地自我怀疑， 感觉没有什么太大的价值， 这样一种心理现象， 要是放以前，就叫作“工作不饱和” 晚上十一点，骑着单车在天府大道， 这个点宽阔的马路上已经没有什么人了， 感受着凉风的抚摸， 聆听着隐藏在黑夜里的宁静， 微小的汗珠在摇摆中渗出额头， 在这初冬的凉风作用下， 一种莫名的畅快洗涤全身。 很久没有体会过运动的快乐了， 它是一种从身体到精神的塑造， 一种尚武的精神， 野蛮其体魄，文明其精神。 ","date":"2022-11-23","objectID":"/posts/20221123233550-%E6%97%A0%E9%A2%98_2022_11_23/:0:0","tags":["杂文"],"title":"无题 2022-11-23","uri":"/posts/20221123233550-%E6%97%A0%E9%A2%98_2022_11_23/"},{"categories":["生活"],"content":"上个月公司体检，检查我有轻度脂肪肝，我也从未想过自己有一天会和这个词有关。 主要自己平时从来都不锻炼身体，平时吃得又太好了。 为了改变，想着还是搞项运动吧。自己一直比较喜欢自行车，要不还是骑车锻炼吧。 说干就干，在京东买了辆 1000 元的山地车，昨天到货，按着教程组装上。 晚上等涵涵做完作业，我就出门骑车了。 沿着天府大道一路向北，天府五街、三街，一直快骑到金融城附近，又折返回来。 骑车还是比跑步要轻松些，吹着风，不冷不热， 看着马路旁繁华的写字楼， 时不时旁边穿过外卖小哥， 似乎生活的节奏慢了下来。 运动完感觉挺好的，以后争取没出差的时候每天都出去遛一圈。 今天我的小学弟给我寄了一个礼物， 他的工作就是炒股，每次见面都会聊聊股票。 很有意思的是他现在的女朋友还是去年通过我的公众号认识的， 计划后面结婚了。 她女朋友也很有意思，之前在杭州的一家事务所工作了 5 、6年时间。 然后 19 年辞职去一家软件公司做类似产品经理的岗位。 可以说完全跨行了，我还是非常佩服她的勇气。 不过她说又有点想回事务所，我感觉有可能是干审计不会太心累。 有时候听着别人的故事，也许他们随性而活，敢拼敢闯，做了一些自己也曾想像过的事， 心里还是会有些触动， 人生嘛，做些自己喜欢的事，挺好。 当听别人故事多了，有时候想是不是可以做一档连线节目， 通过对话的形势把这些故事分享给大家， 也许每个人都有脆弱的、犹豫的瞬间， 和我们一样经历的人的故事也许会给那一瞬间的自己以力量。 不知道公众号朋友有没有兴趣，也不知道大家想听什么？ 如果可以后面我可以尝试看看。 ","date":"2022-11-21","objectID":"/posts/20221121225209-%E9%AA%91%E8%A1%8C/:0:0","tags":["杂文"],"title":"骑行","uri":"/posts/20221121225209-%E9%AA%91%E8%A1%8C/"},{"categories":["工作"],"content":"前天和财审同事约好下午 4 点去客户那，我3:40到了，给同事发消息说我在楼下等他。 突然发现我和他约的时间是4:30……. 生活中我真的是马大哈。 我平时也没有到咖啡店的习惯， 穿着西裤的我，直接一屁股坐在马路旁的花坛边，打开电脑干点活。 突然微信里收到一条信息。 这是 16 年和我一起入职的一个小组的同事 SY ， 她说：“佳兵，我今天才关注你的公众号，一口气看了好多文章。那些关于追求自己的热爱、实现差异化、提高执行力方面的文字，看了之后真心有启发。真的，好棒！也让我回想起了在所工作的经历，累是真累，但大家是真好。” 她是我们当时最优秀的，我们小组一共 4 个新初级，第一个年报后她是唯一一个升职的。 我记得那个时候，她做的货币资金是最难的，基本上 14 项要函证的内容她都集齐了，做的东西都很漂亮，就和她人一样。但因为太累，她差不多干了 1 年就离职了。 而我那个时候，还在粘死数，预审完留给接手的黄狗一堆没有实质性内容的实质性底稿。 那个时候好累啊， 但那个时候也很快乐。 我在部队待了 8 年的时间，战友情是很特殊的情谊，它是在一起摸爬滚打，一起吃苦，一起完成重大任务的基础上建立起来的。 现在我到任何一个城市，都能找到以前的战友，也许以前并不是走得那么近，但一个电话，一定是能喝场酒的。 为什么呢？也许是因为对那个集体、那段岁月的怀念。 而当我来事务所干审计的时候，我在我们组也找到和战友情一样的情谊。 就像我给黄狗一堆屎一样的底稿，她除了经常嘲笑我外，二话不说，还是帮我完成了。 我们是可以在一个战壕里战斗的，可以背靠背相信对方的，可以相互帮助共同完成任务的。 也许正是因为一起吃过苦，所以以前的同事即使大部分都离职了，但还是每年能有机会聚会。 我问 SY 你现在在做什么？ 原来，她离职后就去练记忆术了，一年后顺利考到了世界记忆大师，在往记忆教练这个方向发展。 真的很佩服她，居然跨度这么大。 我高中的时候也研究过记忆术，当时看世界记忆力锦标赛的时候非常向往成为世界记忆力大师。 没想到 SY 那么有勇气和毅力。 平时很多人会感到迷茫，不知道干审计以后自己出去能干什么。 其实还有很多人，不被自己过去拘束，勇敢地追求自己的梦想， 也许这一路上并不顺利，但当你读到她的故事，就能感受到人生的精彩。 而这样的人还有很多， 当大家像被上了发条的木偶一样在即定的赛道上亦步亦趋时， 他们选择了逆行， 追寻着心中闪耀着的微小的梦想。 ","date":"2022-11-16","objectID":"/posts/20221116225214-%E6%88%91%E7%9A%84%E5%90%8C%E4%BA%8B/:0:0","tags":["杂文"],"title":"我的同事","uri":"/posts/20221116225214-%E6%88%91%E7%9A%84%E5%90%8C%E4%BA%8B/"},{"categories":["工作"],"content":"手机号码归属地解析 根据《2020 首发业务若干问题解答》第 53 问， IT 审计需要对互联网终端客户情况是否存在异常进行分析。 其中的分析维度就包含了消费者的地域分布。 当我们拿到的客户的数据，可能发现并没有终端用户所在的省、市信息， 只有终端用户的手机号码或者身份证等信息。 为了能进行地域分布的统计分析，本文将介绍如何利用 Python 将手机号码解析出省、市信息。 这里一共介绍三种方式，相信能够应对所有的情况。 ","date":"2022-10-09","objectID":"/posts/20221009221221-it%E5%AE%A1%E8%AE%A1_%E5%9C%B0%E5%9F%9F%E5%88%86%E5%B8%83%E4%B9%8B%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E8%A7%A3%E6%9E%90/:1:0","tags":["IT审计","python"],"title":"IT审计-地域分布之手机号码归属地解析","uri":"/posts/20221009221221-it%E5%AE%A1%E8%AE%A1_%E5%9C%B0%E5%9F%9F%E5%88%86%E5%B8%83%E4%B9%8B%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E8%A7%A3%E6%9E%90/"},{"categories":["工作"],"content":"phone库 我们可以使用 python 的phone库。 github链接：https://github.com/ls0f/phone 安装 在终端中用pip安装： pip install phone 用法 用法非常简单，这里是官方文档示例： from phone import Phone p = Phone() data = p.find(18190478611) print(data) 执行结果： {'phone': '18190478611', 'province': '四川', 'city': '德阳', 'zip_code': '618000', 'area_code': '0838', 'phone_type': '电信'} 我们可以从电话号码解析出：省、市、邮政编码、行政区划、运营商。 这个库更新时间为 2018 年10月。 由于作者似乎没有再更新，所以有些号码可能存在不能解析的情况。 ","date":"2022-10-09","objectID":"/posts/20221009221221-it%E5%AE%A1%E8%AE%A1_%E5%9C%B0%E5%9F%9F%E5%88%86%E5%B8%83%E4%B9%8B%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E8%A7%A3%E6%9E%90/:1:1","tags":["IT审计","python"],"title":"IT审计-地域分布之手机号码归属地解析","uri":"/posts/20221009221221-it%E5%AE%A1%E8%AE%A1_%E5%9C%B0%E5%9F%9F%E5%88%86%E5%B8%83%E4%B9%8B%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E8%A7%A3%E6%9E%90/"},{"categories":["工作"],"content":"phonenumbers库 除了上面的phone库外，我们这里还有一个一直保持更新的 python 库： python-phonenumbers 安装 pip install phonenumbers 用法 from phonenumbers import geocoder from phonenumbers import carrier import phonenumbers cn_number = phonenumbers.parse(\"18190478611\", \"CN\") # \"CN\"地区代码表示中国 # 电话号码的省和城市 city = geocoder.description_for_number(cn_number, \"zh\") # \"zh\"描述语言表示中文简体 # 电话号码的运营商 carrier = carrier.name_for_number(cn_number, \"zh\") # \"zh\"描述语言表示中文简体 print(city,carrier) 执行结果： 四川省德阳市 中国电信 这个库的优点是一直在更新，但相对来说他把省和城市是合在一起的，需要我们自己去做一个拆分。 不过我们在以前也介绍过如何将地址拆分成省、市、区信息。 ","date":"2022-10-09","objectID":"/posts/20221009221221-it%E5%AE%A1%E8%AE%A1_%E5%9C%B0%E5%9F%9F%E5%88%86%E5%B8%83%E4%B9%8B%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E8%A7%A3%E6%9E%90/:1:2","tags":["IT审计","python"],"title":"IT审计-地域分布之手机号码归属地解析","uri":"/posts/20221009221221-it%E5%AE%A1%E8%AE%A1_%E5%9C%B0%E5%9F%9F%E5%88%86%E5%B8%83%E4%B9%8B%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E8%A7%A3%E6%9E%90/"},{"categories":["工作"],"content":"免费API接口 对于上面的库，如果还有查不到的情况，我们可以使用下面的免费接口代替： import requests import json def parse_phone(phone_number): url = 'https://cx.shouji.360.cn/phonearea.php?number=%s' % phone_number response = requests.get(url) json_str = json.loads(response.text) return json_str['data'] data = parse_phone('18080073070') print(data) {'province': '四川', 'city': '成都', 'sp': '电信'} 这个 360 的接口，同样可以解析出省、市、运营商的信息。 通过三种解析电话号码归属地的方式，我们可以获取到地理位置信息，从而可以进一步去分析终端消费者的地域分布。 这对于 IPO 的项目的 IT 审计来说，应该是实用的。 ","date":"2022-10-09","objectID":"/posts/20221009221221-it%E5%AE%A1%E8%AE%A1_%E5%9C%B0%E5%9F%9F%E5%88%86%E5%B8%83%E4%B9%8B%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E8%A7%A3%E6%9E%90/:1:3","tags":["IT审计","python"],"title":"IT审计-地域分布之手机号码归属地解析","uri":"/posts/20221009221221-it%E5%AE%A1%E8%AE%A1_%E5%9C%B0%E5%9F%9F%E5%88%86%E5%B8%83%E4%B9%8B%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E5%BD%92%E5%B1%9E%E5%9C%B0%E8%A7%A3%E6%9E%90/"},{"categories":["工作"],"content":"国庆放假前一天在现场熬到凌晨两点， 然后写了一篇文章《国庆不加班》，并信誓旦旦地给项目组同事说，“谁让我加班，我就跑路”。 果然，我加了三天班， 也确实跑了，只是跑到所里加的班。 今天开会，领导说：“大家不接受新的事物，再等 10 年，就会被淘汰。” 我脑海里已想像出领导心中构想出的未来审计的画面： 领导说，当年他们干审计的时候用的是铅笔，用算盘做合并， 想想确实从审计作业模式、审计工具的使用上来说，已经发生了天翻地覆的变化。 但再仔细想想大家每天干的事： 任重道远。 注：本文图片由百度AI ERNIE-ViLG模型生成 ","date":"2022-10-08","objectID":"/posts/20221008225536-%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%AE%A1%E8%AE%A1/:0:0","tags":["审计"],"title":"未来的审计","uri":"/posts/20221008225536-%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"好几天没有更新文章了，最近有点忙。 我一个多月没有回家了，上周五刚回家，就被迫到所里加班两天。 还没来得及陪孩子出去走走。 在会计师事务所，很难有闲下来的时间。 虽然这样，正常情况下，我尽量让自己不一天从起床到睡觉都在工作。 说实话，我估计这样我也忍受不了。 其实人一天到晚没有一点自己的时间的话，效率会很低下，心情也会很低下，至少我是如此。 我喜欢晚上能有自己时间学习新东西，写写东西，或者躺着刷刷视频。 其实每天我也没有干什么实质性的东西， 感觉打几个电话，发几条信息，时间就过去了。 当然我是喜欢记录的人，也是喜欢优化工作流的人。 在使用 emacs 后，我把所有工作、学习的事全放在上面。 ","date":"2022-09-26","objectID":"/posts/20220926223437-%E5%BF%99/:0:0","tags":["emacs","效率"],"title":"忙","uri":"/posts/20220926223437-%E5%BF%99/"},{"categories":["工作"],"content":"GTD 工作中接收到什么任务或者想到做什么事，先记录在我的 GTD 清单中。 尽量不让这些事占据我的大脑，影响手头在做的事。 等空闲的时候查看生成的排期，保证先做重要紧急的事。 这样可以只专注于一件事情，不用脑子里想太多东西。 每天也可以回顾下，一天中花费的时间在哪里： 不过开始做一件事的时候，我也经常忘记记时，可能还没有养成这个习惯。 ","date":"2022-09-26","objectID":"/posts/20220926223437-%E5%BF%99/:1:0","tags":["emacs","效率"],"title":"忙","uri":"/posts/20220926223437-%E5%BF%99/"},{"categories":["工作"],"content":"笔记 emacs的org mode是强大的笔记系统。 不管是写公众号文章还是平时学习的笔记都会记录下来： 写完后，也可以一键转为其他格式的文件，如 markdown ，pdf， docx 等，方便和别人分享，并且不需要考虑排版问题。 除了学习外，我也把做过的项目上的记录放在里面： 使用了org roam插件，可以建立双链笔记，一个项目从开头到结束的内容全部记录在里面。 包括： 审计计划 沟通记录 会议纪要 审计内容 重大事项的备忘录 当然如果是项目上每天的工作安排还是记录在前面说的 GTD 上，使用了org agenda插件。 ","date":"2022-09-26","objectID":"/posts/20220926223437-%E5%BF%99/:2:0","tags":["emacs","效率"],"title":"忙","uri":"/posts/20220926223437-%E5%BF%99/"},{"categories":["工作"],"content":"代码 当然，平时还可以使用 emacs 来写 python 代码 甚至在org mode写笔记的时候，也可以执行代码，进行文学编程： 这对于学习编程、写笔记文章非常友好。 ","date":"2022-09-26","objectID":"/posts/20220926223437-%E5%BF%99/:3:0","tags":["emacs","效率"],"title":"忙","uri":"/posts/20220926223437-%E5%BF%99/"},{"categories":["工作"],"content":"结语 最后，我感觉打造属于自己的一套工具链是有好处的。 能让自己按部就班的完成每天的工作， 随着工作流程不断的优化和熟练， 能提高自己的学习、工作效率。 ","date":"2022-09-26","objectID":"/posts/20220926223437-%E5%BF%99/:4:0","tags":["emacs","效率"],"title":"忙","uri":"/posts/20220926223437-%E5%BF%99/"},{"categories":["工作"],"content":"在实践中， IT 审计团队通常是和财务审计团队配合完成审计工作的，区别是财务审计是对被审计单位的财务报表及其附注发表意见，而 IT 审计是对信息系统发表意见。 我们所做的工作是通过测试财务报表所依赖的信息系统(包括财务系统和业务系统）的有效性、数据的真实性，证明信息系统环境是否可以信赖。从某种意义上来说， IT 审计是服务于财务审计。 随着财务审计对 IT 审计工作的了解，他们会对 IT 审计提出更多 IT 审计工作范围外的期待。 尤其是在企业信息化浪潮下，受限于技术能力，财务审计团队在数据处理，方法创新方面对 IT 审计团队提出了更高的要求。因此 IT 审计如何更好地辅助财务审计是一个新的课题。 ","date":"2022-09-18","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:0:0","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"利用Python代替繁重计算 在财务审计中存在大量数据处理、数据计算的基础性工作，对于这类有逻辑重复性工作， IT 审计团队可以借助 Python 批量完成。 ","date":"2022-09-18","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:1:0","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"成本还原 对于生产制造业的 IPO 审计项目，成产品的料工费占比是财务审计特别关注的事项。而很多企业采用了逐步结转分步法来核算生产成本，由于每一道工序的半成品将是下一道工序的原材料，所以要计算产成品真实的料工费占比就需要进行成本还原。 如果企业使用的 ERP 系统没有还原后的成本结构报表，同时财务成本会计也未手工编制成本结构报表，那么这项核查工作对于财务审计来说将是巨大的工作量。 对于这类财审提出的需求，我们会了解企业的生产工艺，以及成本还原的计算方法，再利用 Python 编程语言，模拟成本还原的计算过程，将产成品拆分成真实的料工费，从而计算出料工费的占比。 通过 IT 审计团队的辅助，财审团队能完成人工短时间无法完成的工作。 ","date":"2022-09-18","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:1:1","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"保费收入与收款流水核对 在一家保险公司 IT 审计项目中，财审团队需要我们对保费收入与收款流水进行数据核对。 当我们了解到业务中存在大量多个保单对应多个收款流水的情况，对于这种多对多关系，正常是无法批量核对的。 一般情况下，我们核对的数据关系要么是一对一、多对一或者一对多。这三种情况我们写 SQL 语句时都很好处理，只需要将多条数据按单号聚合汇总再进行核对就可以。 这种多对多的关系我们可以借助数学图论中的二分图解决。 比如，我们将这种关系画上线，可以看到其中可以形成一些独立的网络，这里我们将这种网络（用不同颜色标记）简称为组。 我们将独立的网络编上组号，然后将两个数据集的金额分别按组号汇总再进行核对。 示例 Python 代码： class Net(object): def __init__(self): self.setA = { 'A': ['a', 'b', 'c'], 'B': ['d'], 'C': ['b'], 'D': ['a', 'c'], 'E': ['e'] } self.setB = { 'a': ['A', 'D'], 'b': ['A', 'C'], 'c': ['A', 'D'], 'd': ['B'], 'e': ['E'], } self.keys = list(self.setA.keys()) + list(self.setB.keys()) self.groups = {} def split_net(self): num = 0 for key in self.keys: if key not in self.groups.keys(): num += 1 self.loop_net(key, num) def loop_net(self, node, id): if node: self.groups[node] = id if node in self.setA.keys(): sub_nodes = self.setA[node] else: sub_nodes = self.setB[node] for sub_node in sub_nodes: if sub_node: if sub_node not in self.groups.keys(): self.loop_net(sub_node, id) if __name__ == '__main__': net = Net() net.split_net() print(net.groups) 我们借助 Python 构建了类Net,通过 loop_net函数递归找出两个数据集形成的独立网络，从而给独立网络分组，最后我们可以将两个数据集分别按组号聚合后进行核对。 ","date":"2022-09-18","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:1:2","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"利用Python获取外部信息 在财务审计过程中，外部信息的可靠性大于内部信息，因此审计师会查询大量的外部信息与获取的内部信息做交叉验证。 例如，审计一家汽车硬件销售的企业，财务审计团队计划查询销售订单中对应的汽车车架号的信息，核实有没有真实车辆以及车型信息，以及判断查询的外部信息与订单信息是否存在矛盾。 企业 1 年的销售订单有 30 万，依赖审计师人工查询将不太现实。那么，我们 IT 审计团队提出了两种方案： 购买接口，通过 python 调用接口批量获取数据。 编写爬虫，通过 python 编写爬虫获取公开网站数据。 出于节约成本考虑我们选择编写爬虫获取公开信息，用 python 的selenium包，自动查询网站数据，并将结果保存到本地文件。 视频 最后再由财务审计团队对外部信息与内部信息的一致性进行判断。 当然，对于很多公开网站都会有反爬措施，如验证码、访问频率限制、字体混淆等，对于我们 IT 审计团队提出了一定的技术要求。 除此外，财务审计对于外部信息的获取有很大的需求，如同行业财务指标、公司公告、发函快递信息、汇率、交易性金融资产价格等等。 这类需求，随着这几年的发展已有很多成熟的商业网站可以满足，但对于一些特殊的、行业属性较强的小众信息，如果不能批量查询，那么 IT 审计团队就可以辅助财务审计完成信息获取工作。 ","date":"2022-09-18","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:2:0","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"利用IT技术进行方法创新 2020年 6 月24日，证监会依法对獐子岛公司信息披露违法违规案作出行政处罚及市场禁入决定。证监会将渔船的北斗定位信息，通过第三方机构还原出航行轨迹，从而计算出采捕区域面积，进而估算真实成本。 根据这则公开披露的信息，启发了我们利用信息技术的优势，对相关数据进行深入分析挖掘，使审计工作更加智慧、高效。我们 IT 审计团队相对有信息技术的优势，而财务审计团队在财务处理、项目风险识别等方面更有优势，两个团队的良好融合会发挥1+1\u003e2的效果。 对于这类精纬度空间信息，我们可以通过 Python 计算面积、周长、距离。 示例 Python 代码： from pyproj import Geod # 导入Geod类 from shapely.geometry import Point, LineString, Polygon # 导入点、线、多边形类 # 计算封闭区域面积、周长 geod = Geod(ellps=\"WGS84\") # 创建一个WGS84坐标系 polygon = Polygon([(116.169465, 39.932670), (116.160260, 39.924492), (116.150625, 39.710019), (116.183198, 39.709920), (116.226950, 39.777616), (116.442621, 39.799892), (116.463478, 39.790066), (116.588276, 39.809551), (116.536091, 39.808859), (116.573856, 39.839643), (116.706380, 39.916740), (116.600293, 39.937770), (116.514805, 39.982375), (116.499935, 40.013710), (116.546520, 40.030443), (116.687668, 40.129961), (116.539697, 40.080659), (116.503390, 40.058474), (116.468800, 40.052578)]) # 将多个精纬度坐标实例化为Polygon多边形对象 poly_area, poly_perimeter = geod.geometry_area_perimeter(polygon) # 计算多边形面积和周长 print(poly_area, poly_perimeter) # 打印面积和周长 面积:951546279.1726327 周长:183419.43445625657 ","date":"2022-09-18","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:3:0","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"结语 随着新技术、新模式在企业发展过程中不断涌现，财务审计与 IT 审计的融合将会更加紧密。在这样的背景下， IT 审计的工作界限未来可能会更加模糊， IT 审计如何发挥我们的优势辅助财务审计高效、智慧地完成审计工作需要我们共同探索。 ","date":"2022-09-18","objectID":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/:4:0","tags":["IT审计","python"],"title":"IT审计之辅助财务审计","uri":"/posts/20220918151947-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E8%BE%85%E5%8A%A9%E8%B4%A2%E5%8A%A1%E5%AE%A1%E8%AE%A1/"},{"categories":["工作"],"content":"在处理空间地理信息时，我们常常需要与精纬度打交道。例如，物流运输行业，我们需要计算行驶轨迹的距离，或者对位置信息的可视化，都需要用到精纬度信息。 但有时候，我们获取到的可能只是一个行政区划代码或者是地址信息。我们需要解析出精纬度，从而为下一步计算和可视化打下基础。 之前我们介绍过 python 的cpca库将地址解析成省、市、区信息，而它自身还带有全国行政区划的精纬度信息。 ","date":"2022-09-18","objectID":"/posts/20220918230007-python%E8%8E%B7%E5%8F%96%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E7%9A%84%E7%B2%BE%E7%BA%AC%E5%BA%A6/:0:0","tags":["python","IT审计"],"title":"python获取行政区划的精纬度","uri":"/posts/20220918230007-python%E8%8E%B7%E5%8F%96%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E7%9A%84%E7%B2%BE%E7%BA%AC%E5%BA%A6/"},{"categories":["工作"],"content":"地址拆分为行政区划 通过pip install cpca安装好 cpca 库后，我们通过简单几行代码就可以将地址拆分成省市区信息，以及对应的行政区划代码。 location_str = [\"徐汇区虹漕路461号58号楼5楼\", \"泉州市洛江区万安塘西工业区\", \"北京朝阳区北苑华贸城\"] import cpca df = cpca.transform(location_str) print(df) ","date":"2022-09-18","objectID":"/posts/20220918230007-python%E8%8E%B7%E5%8F%96%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E7%9A%84%E7%B2%BE%E7%BA%AC%E5%BA%A6/:1:0","tags":["python","IT审计"],"title":"python获取行政区划的精纬度","uri":"/posts/20220918230007-python%E8%8E%B7%E5%8F%96%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E7%9A%84%E7%B2%BE%E7%BA%AC%E5%BA%A6/"},{"categories":["工作"],"content":"解析行政区划精纬度 这个库本身并没有解析精纬度的函数，但是我在查看源代码的时候，发现他这个adcodes.csv文件中有行政区划的精纬度信息。 一下就来了精神。 首先我们查看下 cpca 库包装的路径在哪，才能找到这个文件: pip3 show cpca 我发现在我的电脑上文件是在/home/nigo/.local/lib/python3.10/site-packages路径下。 这下我们可以本地直接解析出行政区划的精纬度了，这个目前最小单位是到“区”一级。 import pandas as pd # 读取数据(需要修改成你本地自己的路径） df = pd.read_csv('/home/nigo/.local/lib/python3.10/site-packages/cpca/resources/adcodes.csv',converters={'adcode':str}) data = {} # 循环数据，建立行政区划与经纬度的关系字典 for index,row in df.iterrows(): area_code = row['adcode'] area_code = area_code[:6] data[area_code] = (row['longitude'],row['latitude']) def get_lon_lat(area_code): \"\"\"根据行政区划代码查询经纬度\"\"\" return data[area_code] if __name__ == \"__main__\": lon,lat = get_lon_lat('310104') print(lon,lat) ","date":"2022-09-18","objectID":"/posts/20220918230007-python%E8%8E%B7%E5%8F%96%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E7%9A%84%E7%B2%BE%E7%BA%AC%E5%BA%A6/:2:0","tags":["python","IT审计"],"title":"python获取行政区划的精纬度","uri":"/posts/20220918230007-python%E8%8E%B7%E5%8F%96%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E7%9A%84%E7%B2%BE%E7%BA%AC%E5%BA%A6/"},{"categories":["工作"],"content":"结语 在之前审计的物流运输企业中，物理轨迹的精纬度是单独存放的，而运输订单只有行政区划代码和城市名称，有了这个库就可以不借助第三方接口，方便地解析出起运点和运达点的精纬度。 从而可以计算运输距离，再进一步进行数据分析和数据可视化。 ","date":"2022-09-18","objectID":"/posts/20220918230007-python%E8%8E%B7%E5%8F%96%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E7%9A%84%E7%B2%BE%E7%BA%AC%E5%BA%A6/:3:0","tags":["python","IT审计"],"title":"python获取行政区划的精纬度","uri":"/posts/20220918230007-python%E8%8E%B7%E5%8F%96%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E7%9A%84%E7%B2%BE%E7%BA%AC%E5%BA%A6/"},{"categories":["工作"],"content":"平时我们想获取一些网页的信息，需要写爬虫，有些网站有各种验证码，增加了我们工作的一些困难。 在上个咨询项目中，我发现了一个识别验证码的库，非常好用，推荐给有需要的朋友。 它的名字就叫带带弟弟OCR ，看名字就是拯救我们这类小白的。 他不用安装什么深度学习框架，不需要搞一堆训练集训练，直接安装就可以使用。 ","date":"2022-09-17","objectID":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/:0:0","tags":["python"],"title":"带带弟弟ocr","uri":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/"},{"categories":["工作"],"content":"安装 pip install ddddocr ","date":"2022-09-17","objectID":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/:1:0","tags":["python"],"title":"带带弟弟ocr","uri":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/"},{"categories":["工作"],"content":"识别数字验证码 这里我们拿个最简单的数字验证码看看 我们只需要几行代码，就可以完成数字验证码的识别： import ddddocr ocr = ddddocr.DdddOcr(show_ad=False) with open(\"./images/2022-09-17_23-09-27_screenshot.png\", 'rb') as f: image = f.read() res = ocr.classification(image) print(res) 简单、易用，准确率极高。 在 github 上的介绍页面上，经过大家测试对于这些数字验证码都是可以准确识别的。 ","date":"2022-09-17","objectID":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/:2:0","tags":["python"],"title":"带带弟弟ocr","uri":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/"},{"categories":["工作"],"content":"点选验证码 在介绍页面，这种点选的验证码，也是可以识别的。 ","date":"2022-09-17","objectID":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/:3:0","tags":["python"],"title":"带带弟弟ocr","uri":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/"},{"categories":["工作"],"content":"滑块验证码 竟然还支持滑块验证码的识别，真香！ ","date":"2022-09-17","objectID":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/:4:0","tags":["python"],"title":"带带弟弟ocr","uri":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/"},{"categories":["工作"],"content":"官方文档 这个ddddocr的官方文档地址： https://github.com/sml2h3/ddddocr 对于很多需要破解验证码的网站来说，这个库真是神器。 ","date":"2022-09-17","objectID":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/:5:0","tags":["python"],"title":"带带弟弟ocr","uri":"/posts/20220917225722-%E5%B8%A6%E5%B8%A6%E5%BC%9F%E5%BC%9Focr/"},{"categories":["生活"],"content":"因为成都疫情回不了家，所以我买了张票到媳妇湖南老家去了。 到家后拍了一张照片，在朋友圈发了个状态“日落而归”。 这里夕阳很美。 院子里有两棵树, 这是 2011 年我大三的时候，第一次去她家我们俩种的。 如今，已经这么大了，我们从恋爱到现在也有十多年了。 当年来的时候，他爸爸还在砌这堵墙， 而我就扛着扁担给他爸爸担砖。 晚饭，陪她爸爸喝完酒，在通向山上的马路上散步， 凉风习习，鸟叫虫鸣。 向山下的村子望去， 一片安静详和。 ","date":"2022-09-09","objectID":"/posts/20220909213543-%E6%97%A5%E8%90%BD%E8%80%8C%E5%BD%92/:0:0","tags":["杂文"],"title":"日落而归","uri":"/posts/20220909213543-%E6%97%A5%E8%90%BD%E8%80%8C%E5%BD%92/"},{"categories":["工作"],"content":"之前我有个错觉，很多活只有我能干。 因为很多次问大家，都没人说能干，或者安排了也没干出来。 但，实际上大家都能学出来，之所以没学出来，是因为没有“机会”。 这有两方面原因： 个人原因。 环境原因。 很多人觉得学个东西，得学成了，有 10 分把握了才能干活。不敢去尝试，或者没有好奇心想去尝试。其实当你有 3 分把握的事，都应该去试试。 这是个人的因素，当只有 3 分的实力，愿意去尝试 10 分的事的时候，我感觉人是有创造力的，也是有精气神的。 当然也有环境的因素，以前是没人干，你稍微会一点点就被迫营业了，这有压力，更多的是机会。因为外界对你的期望不高，做不出来也没关系。做出来就会的强烈的正向反馈。 现在呢，可能如果不是自己积极主动，别人觉得你干不了这活，也不会交给你了。失去了这种外界给自己的压力，其实也就失去了非常宝贵的机会。 把几位同事拉进了一个学习群，周一安排了一个做个小工具的任务，黄小仙主动领命，今天就给把成品交给我了。 我感觉还是非常快速的。就算让我去做，我其实也是先网上学习相关文档，然后根据需求写，不一定比她写得快。 我知道，有 3 分本事不断尝试做 10 分的事，这是最快速的成长方法。 这 3 分本事，是自己平时主动学习的结果。 而这 10 分的事，有可能是别人逼你的，也可能是你自己争取的。 无论怎样，循环下去，将看到恐怖的成长。 我感觉以后我可以摸鱼了！ ","date":"2022-09-08","objectID":"/posts/20220908232514-%E6%88%91%E8%AF%A5%E6%91%B8%E9%B1%BC%E4%BA%86/:0:0","tags":["杂文"],"title":"我该摸鱼了","uri":"/posts/20220908232514-%E6%88%91%E8%AF%A5%E6%91%B8%E9%B1%BC%E4%BA%86/"},{"categories":["工作"],"content":"oslaw 前两天，看到有人在一个群里问“哪里可以查马来西亚工商信息。” 有人推荐了一个网址：http://www.oslaw.net/ 其中给了查询境外工商信息的方式。 我看了下这个 oslaw 网站，是一个中介机构常用查询网站的集合，还不错，推荐给大家。 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:0","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["工作"],"content":"主体信息 可以查询境内企业，其他组织/实体，境外实体，海外基金，自然人的相关信息。 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:1","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["工作"],"content":"知识产权 可以查商标、专利、著作权、域名、政府机构、港澳台及境外、知识产权诉讼等相关信息。 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:2","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["工作"],"content":"动产/不动产 可以查询动产、土地、房产、矿产相关信息。 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:3","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["工作"],"content":"行政处罚及征信 可以查询各部委处罚、信用中国、以及一些各平台的征信信息。 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:4","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["工作"],"content":"诉讼仲裁 可以查询司法案例、审判流程、执行、仲裁、涉外、法院及检察院相关信息。 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:5","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["工作"],"content":"法律法规 可以查询法规数据库、政府网站对应的法律法规。 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:6","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["工作"],"content":"资质证照 可以查询常规、电信、文化传媒相关的资质证照信息。 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:7","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["工作"],"content":"资本市场 资本市场相关的信息查询网站 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:8","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["工作"],"content":"医疗卫生 可以查询医疗卫生相关的信息。 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:9","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["工作"],"content":"效率工具 一些办公上用得到的软件也罗列了下： 当然，如果你有自己常用的网站也可以在上面“我的导航”中添加自己喜欢的。 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:10","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["工作"],"content":"结语 我也把这个网站以及一些国外的工商信息网站收录到审计军火库中。 如果还有其他什么好的资源，可以分享到审计军火库： https://gitee.com/nigo81/audit-guid 可以方便大家查询收藏。 ","date":"2022-09-04","objectID":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/:1:11","tags":["效率"],"title":"券商、律师、审计必备网站","uri":"/posts/20220904220239-%E5%88%B8%E5%95%86_%E5%BE%8B%E5%B8%88_%E5%AE%A1%E8%AE%A1%E5%BF%85%E5%A4%87%E7%BD%91%E7%AB%99/"},{"categories":["生活"],"content":"晚上吃了碗面，一个人在酒店楼下抽着烟。 准备一柱香的时间就上楼去。 当我刷着手机，突然一个中年妇女走到我面前。 “给我买份饭吧，我和我妹妹几顿没吃了。”她说着，然后指了下几米远的另一个中年妇女。 她说话很小声，我还没怎么反应过来。 大概两秒后，我仔细看了下她们，衣着整洁，背着包，怎么也不像吃不起饭的样子。 正常情况下，只要是遇到好手好脚的，问我要钱我都不会给，肯定是骗子。 不过呢，酒店底楼旁就是一个小餐馆，卖一些盖饭、面之类的。给她们买份饭，好像我也不会被骗什么。 于是，我说：“好，走嘛。” 带他们进了小餐馆，她们点了盖饭，一共 36 元，扫完码，我就闪了，也没有多余的话。 以前，我遇到的都是什么要车费啊，要吃饭的钱之类的，总之都是要钱。 这种要人买份饭还是第一次。 回来我还在网上专门查了查，发现还挺多这种情况的。 有人反映这种骗人的套路就是你给买了饭后，吃了装痛苦，让人赔医药费。 还好，我付完钱就走了。 小时候，我爸就教我要心善，多做好事。 只要出去遇到断手断脚的，他都会给几块、十块钱。 回乡下老家的时候，看到村子里的傻子坐在我们家门口，也会去盛些肉和饭给他吃。 也许他们都是信因果报应的，认为做善事就会积福。 我爸是修车的，从十几岁从农村出来， 最开始修自行车、后来修摩托车、再后来修货车，一辈子挣的都是血汗钱。 2017年，他从 5 、6米高的地方摔下来，脑内大出血，做了开颅手术，活了下来。 当时我还在年报现场，第二天赶回去的时候，我感觉他可能要走了。因为在 07 年我大伯也是做了开颅手术，没两天就走了。 幸运的是，他挺过去了。 后面他一直给我们念叨他没死的原因是， 他年轻的时候修自行车，看到几个计生办的把一个大肚子妇女往三轮车上拉,要把别人带去引产。 他拿着手上的工具，就把那几个人拦着说：“别人这么大的肚子，你们欺负孤儿寡母的，这是造孽啊，要遭报应的。今天你们就别想把她带走。” 那几个工作人员可能看着我爸一身脏兮兮的衣服，又一副二杆子的样子，就撒手走了。 这也算是救了一个生命。 我爸出院后就反复念叨说他没死，就是当年救了这个人。 我也不知道是否有因果报应，但很多事总是很玄学，命运之中自有安排。 但行好事，莫问前程。 ","date":"2022-09-01","objectID":"/posts/20220901222137-%E9%99%8C%E7%94%9F%E4%BA%BA%E8%AE%A9%E6%88%91%E4%B9%B0%E9%A5%AD/:0:0","tags":["杂文"],"title":"陌生人让我买饭","uri":"/posts/20220901222137-%E9%99%8C%E7%94%9F%E4%BA%BA%E8%AE%A9%E6%88%91%E4%B9%B0%E9%A5%AD/"},{"categories":["工作"],"content":"平时我用的 arcolinux 系统,但有时候也有不得不开 windows 系统的时候. 比如,填工时的时候需要vpn. 所以,之前我是用 virtualbox 装了个 win10 的虚拟机,用的微软官方的开发者版本. 不过不知道什么原因,过几十分钟就会自动关机. 因为平时只是填下工时,所以影响不大,就没有管它. 但是,最近要帮别人写个 VBA 的工具,这就只有在 windows 里面进行了,所以还得重新找个干净的镜像装下. 我之前一直以为微软官方的系统,需要激活什么的,今天直接在官方网站下载了 win10 家庭版的镜像, 用我平时的微软账号登录就完整了,居然不用激活. 原来,这么简单,微软也是允许我白嫖的.也不用担心网上找的镜像安装一堆乱七遭八的东西. 官网下载地址: https://www.microsoft.com/zh-cn/software-download/windows10ISO 终于解决了我虚拟机中 win10 系统自动关机的问题! ","date":"2022-08-31","objectID":"/posts/20220831232615-%E5%B9%B2%E5%87%80%E7%9A%84windows10%E9%95%9C%E5%83%8F/:0:0","tags":["效率"],"title":"干净的windows10镜像","uri":"/posts/20220831232615-%E5%B9%B2%E5%87%80%E7%9A%84windows10%E9%95%9C%E5%83%8F/"},{"categories":["生活"],"content":"逐梦 壹 梦，是模糊的、虚幻的 你看不清它的样子 只能跟着它的影子 一路狂奔 ","date":"2022-08-27","objectID":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/:1:0","tags":["逆行的狗"],"title":"逐梦 壹","uri":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/"},{"categories":["生活"],"content":"楔子 傍晚，答完最后的考题，提前在电脑上点击了确认提交的按钮。 我兴奋地走出注册会计师的考场， 长舒一口气，终于结束了两天 CPA 的6门考试。 门口熙熙攘攘的人群，我像小学生一样蹦蹦跳跳地跑向在门口等我的大学同学龙哥。 他和他媳妇凤姐等着为我庆祝重要的考试。 成都，满是自由的空气，我感觉到前所未有的轻松。 “考得怎么样？”龙哥问。 “应该还可以。” 简单几句话后，龙哥开着车带着我去撸串了。 就着酒，向龙哥讲述着我这几年的辛苦生活， 感受着这自由的一切，满怀对未来的憧憬。 ","date":"2022-08-27","objectID":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/:1:1","tags":["逆行的狗"],"title":"逐梦 壹","uri":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/"},{"categories":["生活"],"content":"缘起 对于我来讲，梦的起点，即是CPA 也是整篇故事的开头。 它成了我对未来所有希望的载体， 虽然，考它的原因只是因为这是我唯二能报名的考试， 但，它就是波涛汹涌的大海中的一片绿叶， 托着我脑海中整个海市蜃楼。 回忆过去的一年， 随着军号， 6 点半起床， 每天看书到晚上 12 点。 偶尔也去菜地，锄锄地， 偶尔也去跑个五公里，出出汗。 CPA就是我的全部， 是我改变命运的机会， 是向反对我的父母的证明， 我相信在哪里我都可以混得很好， 我可以吃苦，我也拥有长期训练出来的“智力”， 而我需要的只是一个机会， 以及给我证明的时间。 和龙哥干完最后一杯酒， 我仿佛看到几年前我们一起训练、一起学习的情景， 入肚的酒气和回忆， 化为内心无尽的信心和勇气。 我来了， 属于我的自由， 属于我的未来！ ","date":"2022-08-27","objectID":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/:1:2","tags":["逆行的狗"],"title":"逐梦 壹","uri":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/"},{"categories":["生活"],"content":"逐梦 贰 走，干审计！ 一次高中同学聚会，一位女同学在信永中和会计师事务所成都分所工作，我给她说我也去考了 CPA ，已经过了三门了，打算以后去事务所工作，你们平时工作怎么样？ 她大概给我讲了些，说平时工作比较辛苦，出差比较多。 我想这辛苦能有多辛苦，总比白加黑，5+2好吧。 “事务所待遇怎么样？”我问。 “她说，你想挣多少？”，她说。 “干个两三年，有 5000 块不？”我小心翼翼地问。 她笑了笑，“那肯定是有的。” “好，那我就去事务所试试。”,心里暗自下了决定。 ","date":"2022-08-27","objectID":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/:2:0","tags":["逆行的狗"],"title":"逐梦 壹","uri":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/"},{"categories":["生活"],"content":"碰壁 2016年 4 月，我就回到了家。 向同学咨询了下，他们要年底才招人。 我想了想，反正还有剩下三门考试要考，就等到下半年去应聘，正好也可以准备下考试。 虽然媳妇没有上班，涵涵才 1 岁，肚子里也有了悦悦， 但这段时间单位还是继续发工资，所以也没有什么压力，自己每天就陪陪家人，复习考试。 大概到了 9 月份，一边准备着考试，一边开始投简历了。 为了保险起见，我百度了下会计师事务所的排名，分别到他们的官网都或者邮箱都投递了简历。 但都石沉大海。 当时我投递的简历就长这样： 我也实在找不到与工作职位相符的经历， 我总不可能写熟练操作山地步兵武器： 95 式自动步枪， 120 火箭筒， 82 毫米无后坐力炮， 100 毫米迫击炮，高射机枪…….吧。 别人肯定会想，“哥，你是来干审计的，还是来砸场子的？” 连写的“单位相关财务工作”也只是和我们司务长经常聊天，硬扯的。 虽然写的熟练运用 office 办公软件，其实连 Excel 都还没有用过。 等了几天，实在等不下去了，怎么办？ 只能发扬“没有条件也要创造条件”的优良传统了。 总体策略就是线下+线上的模式。 线下 我拉出四川排名前 10 的事务所办公地址，跑到成都待了两天，直接到公司前台去投简历。 什么立信、大华、华信全跑了，一般前台收了简历就告诉我后面有招聘的时候会通知我，然后就没有然后了。 只有一个前台老师，年纪比较大了，忘记哪个所了，让我等一下，很负责任地跑去他们领导那里问了下，然后告诉我最近他们不招人。 一次、两次，信心还是有所动摇了，不知道自己找不找得到工作。 线上 由于我认识的人也只有一个前面说的高中同学在事务所，也没有谁能帮忙介绍下。 我就跑到信永的贴吧去，看有没有了解的人指条路： 当时翻贴吧，看到最多的就是这位“不倒的斯嘉莉”，给大家回复招聘的邮箱，我一直在猜想应该是位 HR ，也不知道我猜得对不对。 当然，这也没有什么用，但好在看到同样一批求职的人在问，心里稍微感觉好点。 然后我又加了很多 QQ 群，看看有没有朋友能帮忙介绍的。 当时有个深圳的以前天职的大哥,很热心，帮我介绍给了成都这边他认识的领导。 屁颠屁颠地还跑去参加了天职在某个高校的校招的宣讲会，让我到年底的时候等他们通知。 当时很感谢这位大哥，他后面回成都了，约了几次吃饭，都没约成功，没有当面感谢他。 总之，这段时间都没有任何结果，只能老老实实看书了。 ","date":"2022-08-27","objectID":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/:2:1","tags":["逆行的狗"],"title":"逐梦 壹","uri":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/"},{"categories":["生活"],"content":"柳暗花明 大概是考完注会后，终于收到信永的笔试通知了。 当时高兴坏了，总算看到了一丝希望。 接下来，很顺利地通过笔试。 后面是面试， 还记得是人力蒋总、汪经理、夏经理面试我， 开始让我自我介绍，简短介绍了下后， 就是问专业问题， 汪经理问：“审计货币资金要执行哪些审计程序。” 当时我飞速思考了三秒，最多就是三秒。 我发现我都忘记完了，因为会计这门是去年考过的。 我赶紧回答，“不知道。” 这时，汪经理笑了笑说：“哦，你应该是忘记了，后面真正工作了和实务结合起来就印象深刻了。” 结果，居然就没有再问我专业问题了，反而对我之前的工作比较感兴趣。 然后，就开始聊之前的生活，说着说着三位领导都不停在笑。 整个面试就在轻松的氛围下结束了。 出来，我还问了一起面试的朋友，他们被不停地问各种专业问题，我感觉自己运气太好了。 接着就是合伙人面试，当时是大罗总面试的我。 走进他办公室，他摘下眼镜，看着我的简历，非常儒雅的气质。 “我们这刚开始工资比较低，你的期望工资是多少？”罗总问。 “ 2000 ”，我说。 他突然忍不住地笑了笑说：“ 2000 倒不至于。” 不过，当时我就是想学东西，只要能管吃住，不给钱都愿意干。 罗总说：“给你两年的时间，一年 20 万不成问题。” 虽然后面自己干得并不好，但当时他的话让我对未来还是充满了期望。 走出他办公室，感觉稳了，心里憧憬着能成为一名注册会计师，能有一技之长，能混口饭吃。 大概 1 个月后，我收到了录取通知，凭着自己努力终于找到自己想要的工作了。 走，干审计！ ","date":"2022-08-27","objectID":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/:2:2","tags":["逆行的狗"],"title":"逐梦 壹","uri":"/posts/20220827231902-%E9%80%90%E6%A2%A6_%E5%A3%B9/"},{"categories":["生活"],"content":"下完班，一行四人坐地铁回酒店。 其实酒店并不远，坐一站地铁就可以到，但地铁里走的时间远远超过了坐地铁的时间。 今天的广州下着小雨，出站后我们在人行道等着红绿灯。 突然，我看着小林带着一个外国小哥走到梅总的旁边， 小哥让梅总帮忙接听下电话，给滴滴司机说下他在哪里。 开始我还以为小哥说的粤语，听不懂。 梅总帮他把订单取消了，然后给他指了路。 全程，我就听到梅总最后说了个Of course 中间我问小林，为什么你自己不给小哥说，要让梅总去？ 小林说：“我英语不好。” 我说：“你这个英语是可以的，指个路没问题。” 她说：“我是有家室的人。” 我看了看小哥， 180 几，高高瘦瘦，一幅清秀的样子。 “你怕是想得有点多哦，别人只是问个路，你还来个I hava family” 翻了一个大大的白眼给她。 ","date":"2022-08-25","objectID":"/posts/20220825232249-%E7%BB%99%E8%80%81%E5%A4%96%E6%8C%87%E8%B7%AF/:0:0","tags":["杂文"],"title":"给老外指路","uri":"/posts/20220825232249-%E7%BB%99%E8%80%81%E5%A4%96%E6%8C%87%E8%B7%AF/"},{"categories":["生活"],"content":"时间一天一天过去， 它的离去甚至都不曾通知你， 挤在早高峰的地铁， 拘谨的空间中也无人认识你， 每天做着一件又一件重复的事情， 迎着朝霞，送走夕阳， 走过无数个城市， 当夜晚来临， 蜗居在廉价酒店， 吃着一份外卖， 这又是未曾通知且不曾期待的一天。 ","date":"2022-08-22","objectID":"/posts/20220822234714-%E6%97%A0%E9%A2%98_2022_08_22/:0:0","tags":["杂文"],"title":"无题 2022-08-22","uri":"/posts/20220822234714-%E6%97%A0%E9%A2%98_2022_08_22/"},{"categories":["工作"],"content":"“数据是 21 世纪的石油，而分析则是内燃机。” 如果说数据是石油，其本身是无价值的，只有对数据深度挖掘，才能为企业业务增长提供新的引擎，形成真正的数据资产。 近年来，随着信息技术飞速的发展，企业信息化建设已由类似于 ERP 等行业属性相对较强的信息系统建设转向信息系统之上的数据管理与业务应用建设，如建设适应企业业务发展的数据中台、业务中台等新型 IT 架构。通过建设敏捷高效可复用的支撑平台，为业务数字化创新提供高效数据和服务支撑。 IT审计执行的信息系统一般控制、应用控制测试是对企业信息科技领域管控的评价，仍然是对信息系统基础设施及建立其上的业务流程的控制测试。面对企业业务开展所产生的海量数据，其勾勒出了企业经营活动真实画像，数据核查工作在应对舞弊、异常检测方面显得越来越重要。 ","date":"2022-08-14","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:0:0","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"数据核查的特点 ","date":"2022-08-14","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:1:0","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"由抽样审计转变为全量审计 IT审计的数据核查大多时候是为财务审计服务的。受限于技术手段，财务审计在进行数据核查时，往往是抽样审计。但面对类似电商、游戏等这样的互联网企业所产生的海量销售订单，抽样检查多少个合适呢？ 100 个、 1000 个还是 10000 个才合适呢？ 借助于 SQL 、ClickHouse等大数据分析技术，我们可以对上亿行的数据量进行全量核查，全量分析。 例如，对于大型集团企业，审计在执行银行流水与财务序时账核对时一般仅对大额流水进行检查，并且会耗用大量人力和时间。如果企业开通了银企直联，银行流水与序时账一般会有关联字段，我们可以利用 SQL 进行全量双向核对；如果企业未开通银企直联，或没有关联字段，我们仍然可以利用 Python 按照人工核对的逻辑编写代码，实现网银流水与序时账的全量核对，不再区分金额大小。 再如，对于生产工艺复杂的制造型企业，其工序可能多达十几步或者几十步，审计难以对生产成本进行重新计算以验证存货计量的准确性。但对于计算机来说，这些工序的成本分摊逻辑是一致的，借助于 Python ，我们也是可以实现对所有工单的生产成本的归集和分摊进行全量重新计算。对于这些收入、成本计算逻辑复杂的企业，利用 Python 这样的编程语言，复现系统的计算逻辑，能取得很好的数据核查效果。 ","date":"2022-08-14","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:1:1","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"数据分析的颗粒度更小 财务审计在执行分析性程序时，往往使用的数据颗粒度很大，如按年或月的汇总金额去进行波动分析。数据的颗粒度就像一张照片的像素，当颗粒度很大时，照片所呈现的信息将会失真，很多细节信息将难以发现。而 IT 审计进行数据核查时一般按照最小颗粒度的数据进行多维度分析，如订单、小时、分钟、渠道等，这是异常检测的基础。 如上图所示，当我们将订单按照一天 24 小时划分为 24 个区间，分别统计每个小时区间的订单金额时，能发现 2019 年0点和 2020 年8点的订单金额显示异常。这就是将分析的颗粒度变小的好处，能还原更多细节信息。 如上图所示，我们甚至可以按分钟去统计次数，去检测是否存在利用机器人等技术短时间大量刷单的情况。 如上图所示，我们可以以订单的颗粒度去分析单价的稳定性，对于发散的或者偏离正态分布的数据检测出来，进一步去核查异常数据产生的原因。 ","date":"2022-08-14","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:1:2","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"数据核查对象多样化 在大数据时代，几乎所有的人、事、物都能够数据化，进而被分析。 我们将数据核查的对象可以划分为结构化数据和非结构化数据，结构化数据即为能够用数据或者统一结构加以表示的信息，如信息系统中的各种报表。而非结构化数据，就是一些无法用数字或统一的结构表示，如合同、发票、邮件、网页等。 IT审计数据核查的对象不再局限于财务账、业务报表等结构化数据，借助于新的 IT 技术，我们可以将数据核查的范围延伸到非结构化的数据。 如上图所示，审计一家航运企业，以前我们只能通过手工抽样查询船舶定位位置与业务系统中的班期表核对，验证航行的真实性。现在我们可以利用 Python 爬虫技术，批量解析网页中船舶经纬度信息和出发地、目的地，全量核对。 如上图所示，借助于 OCR 技术，我们可以将非结构化的发票图片文件识别成结构化数据，从而实现发票的全量核查。 当然，我们还可以将数据划分为财务数据、业务数据、日志数据三种类型，财务审计在做数据核查时更多核查的是财务数据。而 IT 审计核查的对象会延伸到业务数据和日志数据。 从企业舞弊造假成本来说，=财务数据\u003c业务数据\u003c日志数据=，我们更倾向于通过日志数据、业务数据的核查来验证财务数据的真实性、准确性、完整性。 如上图所示，审计一家制造型企业，我们获取了公司 ERP 系统的操作日志，按天对作业频率进行分析，检查作业频率异常偏高的情况，以排查是否存在舞弊迹象。由于操作日志真实反映了人员的所有系统操作，其数据的可信度相比财务数据更高，能更好地应对舞弊欺诈行为。 总之， IT 审计的数据核查的来源具有多样化的特点。 ","date":"2022-08-14","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:1:3","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"数据核查的方法 IT审计数据核查需要将 IT 技术与审计方法相结合。在信息技术飞速发展的浪潮下，我们需要拥抱新技术、新思想、新变革，同时对我们的审计思路、审计模式进行创新。 审计一家游戏企业，玩家通过充值获得游戏币，游戏币可以在商城中购买游戏道具，购买的道具可以自己使用也可以赠送他人。在审计过程中，我们发现一些账号的充值金额异常大，我们利用 Neo4j 图数据库将所有道具的赠送关系进行网络分析： 我们发现消费金额前 25 名的异常账号，其中就有 19 个账号相互之间有赠送行为，形成了网络。通过进一步审计程序，我们发现其中一些账号是淘宝店家，他们通过从价格更低的渠道充值后，以\"赠送\"的方式卖给游戏玩家，因此其充值金额较大，且存在大量赠送行为。 利用 Neo4j 、Gephi、 NetworkX 等工具，我们可以轻松地进行复杂网络关系分析，挖掘出数据背后的关联关系，这是新技术为我们数据核查带来了新的手段、新的方法。 但 IT 技术仅仅是一种工具，我们在做数据核查时，更多的需要和我们的审计方法论结合、和生活常识结合、和行业经验结合、和统计学知识结合。 例如， IPO 的电商企业的数据核查要求我们 IT 审计对是否存在刷单行为进行分析，从数据分析的工具上讲，我们使用 SQL 就能进行分析，但我们从什么维度去分析能发现是否存在刷单行为呢？ 其实我觉得更好的方法是从生活常识入手，从行业经验入手，我们可以去找参与过刷单朋友，询问他们是如何刷单的，了解其特点，然后再设计数据分析的维度。 例如，我向朋友了解到有的刷单方法是找普通的人去购买，发货的时候只发一个空盒子或者价值较小的重量较轻的东西，完成订单后，再通过微信红包的方式返钱给他。 针对这种刷单方式，我们就可以利用“发货重量轻“的特征去筛选出这些异常订单。我们可以根据商品 SKU 的重量信息，计算出系统里一个订单的重量，再去和物流公司发货时称重重量核对，从而检测出重量偏离较大的异常订单。 当然，这只是一个举例，通过这个例子，我想说明在 IT 审计数据核查过程中分析的思路很多时候比技术手段更加重要。 我们正处在信息爆炸、技术变革的时代，我们应该学习新的 IT 技术，积极探索新的审计方法、审计思路，通过深入挖掘数据背后的价值，提高我们的审计质量、审计效率。 ","date":"2022-08-14","objectID":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/:2:0","tags":["IT审计"],"title":"IT审计之独立数据核查","uri":"/posts/20220814214453-it%E5%AE%A1%E8%AE%A1%E4%B9%8B%E7%8B%AC%E7%AB%8B%E6%95%B0%E6%8D%AE%E6%A0%B8%E6%9F%A5/"},{"categories":["工作"],"content":"下午被安排给新员工培训 SQL ，带着大家从安装数据库到一些简单的 SQL 语句，讲了 3 个小时。 其实如果大家平时项目上遇不到这种大数据量的情景的话，基本上没有太大的用。但整个分所还是有不少的这样的项目。 唯一的作用感觉就是让他们有一个亲身处理 400 多万行数据的感觉，将来如果遇到了知道学习什么。 其实做一项系统工程，需要处理好三个维度：时间维、逻辑维、知识维。 其中知识维就是要么你知道用什么知识，要么你能用拥有这些知识的人。无论打工者还是老板概莫能外。 对于学习知识的我们来说，其实知识本身并不重要，而习得知识的能力很重要。 你如果留心周围的人会发现，一般厉害的人不只是一方面厉害，更多情况下多方面厉害。一个掌握学习能力的人你随便丢他到陌生的领域，大概率他也会很厉害。 大部分人都停留在表面，觉得做一份工作，学一门知识，自己就是专家了，忽视了背后的基础技能的重要性。其实呢，无论什么工作都有可能被淘汰，任何一门知识都都会变得无用。你平时所做的努力，都在积累背后的某一种能力。 而最能让你有碗饭吃就是这些基础能力。 就像我的领导，我觉得她有一种能力就是说服人的能力，同样一句话，从她嘴里说出来，就能让人信服。有这样的能力，去哪个公司不能当个中层领导？ 就像几年前我加入过\"千熊会员\"，一个四大出来做知识付费的审计师，我发现他有个能力，就是能把一个方法、流程包装成非常吸引人的\"产品\"，靠着这个\"包装\"和总结的能力确实能把知识卖出去。 而我评估自己的能力就是数理逻辑能力，只要是有一定门槛，依赖数理逻辑的专业，我有信心能快速上手。 人的延展性是非常强的，不只一种可能。如果有一天这个行业都没了，总得吃饭吧，我可能为了生计就得去跑外卖或者开滴滴。 如果我是去跑外卖，在熟悉情况后，我也一定会去计算和统计哪种路径、时间、方式去跑能时效比最高。 如果我是去跑滴滴，在熟悉情况后，我也一定会去计算哪个时间段、哪个区域去跑最挣钱。 而我还是得用我最擅长的技能。我还会利用以前在部队宣传股学到的技能，去做自媒体，讲我们外卖小哥的故事。 上高中时，非常喜欢看的美剧《 Heros 》(超能英雄)，我最喜欢的一个角色就是 Peter ，他的超能力就是可以学习其他有超能力的人的超能力，简直太 Bug 了。 还有一个反派角色是 Sylar ，他的超能力是洞悉事物的本质，但是需要挖开别人的脑子，过于残忍，不太喜欢。 最后，想说什么呢？ 多学点别人带不走的东西，时刻保持在哪里都可以吃饭的能力。 ","date":"2022-08-14","objectID":"/posts/20220814214721-%E8%B6%85%E8%83%BD%E8%8B%B1%E9%9B%84/:0:0","tags":["感悟"],"title":"超能英雄","uri":"/posts/20220814214721-%E8%B6%85%E8%83%BD%E8%8B%B1%E9%9B%84/"},{"categories":["工作"],"content":"前几天一个网友发了一个传销组织的数据，他想求每个层级的人数。 Figure 1: 图1 这两天正好学了networkx，我们来看如果用网络分析解决这个问题。 Figure 2: 图2 这是整个推荐关系的可视化网络图。其中正红色的点为根节点。 下面我们一步一步来解决。 ","date":"2022-08-14","objectID":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/:0:0","tags":["网络分析","python","IT审计"],"title":"传销组织层级结构分析","uri":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["工作"],"content":"读取数据并创建网络 我们使用pandas读取 excel 数据，并用nx.from_pandas_edgelist(df,source,target,edge_attr,create_using)函数来创建一个图=G=。 这个函数是根据边数据来创建图，其中： source:df中表示边起始的列名（推荐人）。 target:df中表示边目标的列名（被推荐人）。 edge\\_attr:df中表示边属性的列名（如权重，颜色，大小等）。 create\\_using:表示创建什么类型的图，无向图，有向图等。这里我们使用有向图=DiGraph=,因为推荐关系是有方向的。 import networkx as nx import pandas as pd # 读取数据创建图 df = pd.read_excel('~/传销原始数据.xlsx') df = df.loc[:, ['推荐人ID', '被推荐人ID']] df.columns = ['source', 'target'] G = nx.from_pandas_edgelist(df, 'source', 'target', create_using=nx.DiGraph()) 当然这样创建的图=G=只是一个类的实例化，并不一张真正可视化的图。如果你想可视化它，可以使用=pyvis=包进行，它可以生成一个可交互的网络图。 from pyvis.network import Network nt = Network('650px', '1250px', directed=True) nt.from_nx(G) nt.show('test.html') 这将会生成如图 2 所示的网络图。 ","date":"2022-08-14","objectID":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/:1:0","tags":["网络分析","python","IT审计"],"title":"传销组织层级结构分析","uri":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["工作"],"content":"找到根节点 考虑到这个网络是一个传销组织，那么正常情况下应该是有个唯一的根节点，整个组织类似树状结构。 我们先得找到这个根节点，怎么找呢？ 这就需要先引一个图论中的概念度，度的意思就是一个节点的相邻节点的数量。 Figure 3: 图3 如图 3 所示，如果不考虑边的方向，那点节点 1 有4个相邻节点（有边相连），那么节点 1 的度就是 4 。 即degree=4。 但是这是一个有向图，就会分成in_degree和 out_degree 两种度。 那么我们要找到根结点，只需要去找in_degree==0的节点就是根节点，同理out_degree==0的节点为末级节点。 因此，我们写代码： top_nodes = [n for n, d in G.in_degree() if d == 0] print('root node:', top_nodes) 可以计算出根结点为： [0] Figure 4: 图4 如图 4 所示，我们可以找到图中的根节点，它就是这个网络的头目。 ","date":"2022-08-14","objectID":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/:2:0","tags":["网络分析","python","IT审计"],"title":"传销组织层级结构分析","uri":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["工作"],"content":"计算网络层级关系 为了计算网络层级关系，这里我们需要引入一个概念*距离*，也就是两个节点之间的最短路径长度。 Figure 5: 图5 对于节点 1 到节点 4 的距离为 3 ，因为两条路径可以从节点 1 到达节点 3 ： [1, 2, 3, 4] [1, 2, 5, 4] 这两条路径最短的距离就是 3 。 在networkx库中有个函数nx.shortest_path_length(G,source,target)可以求出节点source和 target 之间的距离。 如果省略target参数，就可以求出source下所有节点与source之间的距离。 因此，我们只需要用=nx.shortest_path_length(G, 0)=就可以求出=根节点0=下的所有节点的距离，也就是*网络层级*。 level = nx.shortest_path_length(G, 0) nx.set_node_attributes(G, level, 'level') level 的值是下面这样的=节点:距离=的字典，可以看到一共 32 个层级。 {0:0,2576:1,..., 5659: 32} 我们求出了所有子节点到根节点的距离level列表，用set_node_attributes()函数给每个节点添加一个层级属性。 下面，我们只需要将level列表，统计出 1-32 层级中分别有哪些节点即可。 # 显示层级 data = {} for n, l in level.items(): if l in data.keys(): nodes = data[l] nodes.append(n) data[l] = nodes else: data[l] = [n] # 打印前10层节点 for l, n in data.items(): if l \u003c 10: print(l, n) 这里我们展示前 10 层级对应的哪些节点： 当然，我们将上面print(l,n)替换成print(l,len(n))，就可以看到每一层级对应的节点数量。 Figure 6: 图6 ","date":"2022-08-14","objectID":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/:3:0","tags":["网络分析","python","IT审计"],"title":"传销组织层级结构分析","uri":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["工作"],"content":"下线前10的节点 我们知道=度=表示了相邻节点数量，那么度值最大的 10 个，也就是下线数最大的 10 个。 degrees = G.out_degree() top_degree_nodes = sorted(degrees, key=lambda x: x[1], reverse=True)[:10] print(top_degree_nodes) 计算结果： [(2828, 264), (0, 115), (2700, 86), (2833, 65), (2999, 55), (2560, 53), (2574, 42), (3021, 37), (2651, 36), (2834, 31)] 可以看到下线最多的节点是节点2828有 264 个下线，第二是根节点0有 115 个下线。 Figure 7: 图7 这些节点表现在图中就是像水母一样的中心节点。 ","date":"2022-08-14","objectID":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/:4:0","tags":["网络分析","python","IT审计"],"title":"传销组织层级结构分析","uri":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["工作"],"content":"最大介绍top10 除了通过=度=来衡量一个节点是否为关键节点外，我们还可以通过介数来衡量。 如图 8 所示，根节点 0 传递到节点1,节点2,节点3…. 其中节点2,节点 5 的度非常小，分别为 2 和1,但是如果少了他们的话，后面整个网络就断了。 介数就是表示网络中群体与群体之间的中间人角色，现实生活中如果度数大的是黄牛，那么这个介数的中间人就是给黄牛提供渠道的关键人物。 Figure 8: 图8 我们在图中将前 10 大中介点标记成了绿色，方便查看。 ","date":"2022-08-14","objectID":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/:5:0","tags":["网络分析","python","IT审计"],"title":"传销组织层级结构分析","uri":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["工作"],"content":"完整代码 以上分析的完整代码： import networkx as nx from pyvis.network import Network import pandas as pd # 读取数据创建图 df = pd.read_excel('~/传销原始数据.xlsx') df = df.loc[:, ['推荐人ID', '被推荐人ID']] df.columns = ['source', 'target'] G = nx.from_pandas_edgelist(df, 'source', 'target', create_using=nx.DiGraph()) # 求根节点 top_nodes = [n for n, d in G.in_degree() if d == 0] print('root node:', top_nodes) # 节点层级 level = nx.shortest_path_length(G, 0) nx.set_node_attributes(G, level, 'level') # 显示层级 data = {} for n, l in level.items(): if l in data.keys(): nodes = data[l] nodes.append(n) data[l] = nodes else: data[l] = [n] # 打印前10层节点 for l, n in data.items(): if l \u003c 10: print(l, len(n)) # 打印前10大度节点 degrees = G.out_degree() top_degree_nodes = sorted(degrees, key=lambda x: x[1], reverse=True)[:10] print(top_degree_nodes) # 给节点添加属性 for node in G.nodes: G.nodes[node]['title'] = str(node) level = G.nodes[node]['level'] # 给节点添加大小属于 G.nodes[node]['value'] = 32 - level # 第一、二、三层节点添加颜色 if level == 0: G.nodes[node]['color'] = 'red' elif level == 1: G.nodes[node]['color'] = 'fuchsia' elif level == 2: G.nodes[node]['color'] = 'purple' # 中介点 center = nx.betweenness_centrality(G) center_tops = sorted(center.items(), key=lambda x: x[1], reverse=True)[:10] # 给前10大中介点添加颜色 for node in center_tops: G.nodes[node[0]]['color'] = 'teal' nx.write_gexf(G, 'test.gexf') nt = Network('650px', '1250px', directed=True) nt.from_nx(G) nt.show('test.html') ","date":"2022-08-14","objectID":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/:6:0","tags":["网络分析","python","IT审计"],"title":"传销组织层级结构分析","uri":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["工作"],"content":"结语 networkx是复杂网络分析的利器，搭配上可视化库 pyvis ，可以简单几行代码完成分析和可视化。 ","date":"2022-08-14","objectID":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/:7:0","tags":["网络分析","python","IT审计"],"title":"传销组织层级结构分析","uri":"/posts/20220814001303-%E4%BC%A0%E9%94%80%E7%BB%84%E7%BB%87%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"},{"categories":["工作"],"content":"给一个公众号投了关于 IT 审计的文稿，需要一张作者照片。 但我发现之前没有拍稍微正式点的形象照，所以就一个人跑去照相馆拍了。 说实话，平时我都不拍照，我媳妇用手机给我拍也是抗拒的，每次都是一种不自然的状态。 就听到给我照相的小哥不停的说： “哎～，来微笑” “对，稍微笑一点” “哎～，来～，笑一下” “对，对～，很好，自然一点” “表情僵了，来，自然一点” 我都替小哥着急，想着赶紧拍完了事。 为了后面不再拍照，就一次性选了 9 张照片，花了 900 大洋，有点心疼。 如果有 IT 审计相关的业务咨询可以邮件联系: tujiabing81@163.com ","date":"2022-08-14","objectID":"/posts/20220814214405-%E7%8B%97%E5%93%A5%E5%8E%BB%E7%85%A7%E7%9B%B8%E9%A6%86/:0:0","tags":["杂文"],"title":"狗哥去照相馆","uri":"/posts/20220814214405-%E7%8B%97%E5%93%A5%E5%8E%BB%E7%85%A7%E7%9B%B8%E9%A6%86/"},{"categories":["效率"],"content":"有网友问，怎么批量修改文件最后的修改日期。 比如， excel 文件、 word 文件等。 当然我们先将电脑日期设置成以前的某个日期，然后一个一个打开文件后，修改下，再保存。这样可以完成日期的更换。 今天我们用 python 来实现文件修改日期的批量替换。 比如在=/home/nigo/tmp/test=文件夹下有一些文件，最后修改日期是=2022-07-19=。 我们只需要做两步： 循环获取该文件夹所有文件路径。 修改文件日期 我们先看修改文件日期： import os def change_file_date(path, atime, mtime): \"\"\"改变文件修改日期和访问日期\"\"\" info = os.stat(path) os.utime(path, (atime, mtime)) 我们只需要用os.utime函数就可以将文件的访问日期和修改日期分别改变为atime和 mtime （时间戳数字）。 完整代码如下： import os import datetime def change_file_date(path, atime, mtime): \"\"\"改变文件修改日期和访问日期\"\"\" info = os.stat(path) os.utime(path, (atime, mtime)) def get_file_list(dir, file_list): \"\"\"递归获取文件夹下所有的文件路径\"\"\" newdir = dir if os.path.isfile(dir): file_list.append(dir) elif os.path.isdir(dir): for s in os.listdir(dir): #如果需要忽略某些文件夹，使用以下代码 # if s == \"xxx\": # continue newdir=os.path.join(dir,s) get_file_list(newdir, file_list) return file_list if __name__ == \"__main__\": # 需要修改的文件所在的文件夹 modify_directory = '/home/nigo/tmp/test' # 需要设置成的修改时间：年,月,日,时,分,秒 modify_time = datetime.datetime(2022, 4, 5, 18, 20, 31) # 将时期转化为时间戳 mtime = datetime.datetime.timestamp(modify_time) # 获取指定文件夹下的所有文件路径 paths = get_file_list(modify_directory, []) # 循环所有文件 for path in paths: # 修改文件的访问时间和修改时间 change_file_date(path, mtime, mtime) 我们执行代码将/home/nigo/tmp/test文件夹下的所有文件修改日期改变为2022-04-05 18:20:31。 可以看到所有文件的修改日期已全部批量修改。 当然你会 VBA 的话，也可以使用 VBA 实现，只是用 Python 更快速一点。 ","date":"2022-08-14","objectID":"/posts/20220814214636-%E6%89%B9%E9%87%8F%E6%94%B9%E5%8F%98%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/:0:0","tags":["python"],"title":"批量改变文件最后修改时间","uri":"/posts/20220814214636-%E6%89%B9%E9%87%8F%E6%94%B9%E5%8F%98%E6%96%87%E4%BB%B6%E6%9C%80%E5%90%8E%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4/"},{"categories":["效率"],"content":" 陈版主答疑文章使用的爬虫失效了，暂时没有更新，这周我抽时间更新下，再为大家每天推送。 昨天文章有朋友留言让分享下上交所警示函下载的工具， 虽然写这个代码不难，但还是可以和大家分享下思路。 ","date":"2022-08-14","objectID":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/:0:0","tags":["python"],"title":"上交所警示函批量下载","uri":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/"},{"categories":["效率"],"content":"任务拆解 当我们想做一个工具的时候，首先需要梳理出逻辑。 也就是先手工操作一遍，把一个大任务拆分成可执行的小任务。 ","date":"2022-08-14","objectID":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/:1:0","tags":["python"],"title":"上交所警示函批量下载","uri":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/"},{"categories":["效率"],"content":"大目标 比如，我们的目标是登录上交所网站，输入“警示函”关键字，点击查询， 点击一个列表页，将显示的 PDF 下载下来，然后复制其中的文字到我们保存的文件中。 这个流程有好几步，很多人刚开始学习的时候不太意识到这是一个大目标， 你直接对别人说：“哎，把最近几年上交所警示函内容帮我整理出来。” 别人是茫然的，不知道怎么做。 同样的，你自己也不知道，你可能只能在浏览器上搜索：“批量下载上交所警示函” 如果运气好，别人做过，可能会有现成的轮子，否则，你就又卡住了。 要知道，对于一个大目标我们是很难实际落地执行的。 ","date":"2022-08-14","objectID":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/:1:1","tags":["python"],"title":"上交所警示函批量下载","uri":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/"},{"categories":["效率"],"content":"小任务 那么,要想实现我们的大目标，最好的方法就是任务拆解。 获取网页信息（包括 PDF 下载链接) 下载 PDF 文件 解析 PDF 文件 保存数据 当我们能把任务进行拆解后，难度就自然极度下降了， 我们现在只需要针对这 4 个问题写函数完成。 我们以最简单的解析 PDF 文件为例， 啊？为什么这个是最简单的？因为之前在一篇文章中学过，用 pdfplumber 库解析 PDF 。 import pdfplumber def extract_pdf(path): \"\"\"提取pdf文字内容\"\"\" with pdfplumber.open(path) as pdf: pages = pdf.pages text = ''.join(page.extract_text() for page in pages) return text 你看 4 个问题，我们就解决了一个。简单吧？ ","date":"2022-08-14","objectID":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/:1:2","tags":["python"],"title":"上交所警示函批量下载","uri":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/"},{"categories":["效率"],"content":"周而复始 需要注意的是，上交所给的 PDF 绝大部分是文本的，一小部分的是扫描图片的。 这个代码只能解析文本的 PDF ，如果你想完全解决，那么我们又可以任务拆解的方法， 将3.解析PDF文件分解为： 3.1 解析文字类PDF 3.2 解析扫描类PDF 啊？扫描类的 PDF 文件我怎么解析呢？要么你在浏览器上搜索下有没有这个解决办法。 要么我们再进一步拆解，我们可以把扫描的 PDF 保存为一张张图片,再用 OCR 去识别图片： 3.2.1 PDF拆分成图片 3.2.2 OCR识别图片为文字 每一个如果不会，就去搜索解决，搜索没有直接答案的，就看能不能拆成更小的任务， 循环往复，直到找到解决问题的方法。 ","date":"2022-08-14","objectID":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/:1:3","tags":["python"],"title":"上交所警示函批量下载","uri":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/"},{"categories":["效率"],"content":"搜索问题及笔记记录 通过上面的步骤，我们能把一个复杂任务转换为简单任务。 这也是数学中的化归思想。 这些简单任务，有些我们可能已经会了，有些可能不会。 对于不会的，我们就需要去检索了，也就是问 度娘。 这个真就是熟能生巧了，查得多了，就有技巧了，基本小的问题你都能解决。 当你查到后，一定要把有价值的问题，记录到你的笔记中， 你看上次我们在“ python 提取关键审计事项”的文章中用到的pdfplumber， 今天又用上了。 查一次你可能会忘记，当你记录下来，下次遇到你就节约了检索的时间， 多遇到几次，你就彻底掌握了，这个就是知识习得的过程。 ","date":"2022-08-14","objectID":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/:2:0","tags":["python"],"title":"上交所警示函批量下载","uri":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/"},{"categories":["效率"],"content":"完整代码 其实代码并不重要，有需要的可以自己拿来练习、练习。 import pdfplumber import pandas as pd import requests from urllib.parse import urljoin,urlencode,quote import os import pymysql import time as ttime def extract_pdf(path): \"\"\"提取pdf文字内容\"\"\" with pdfplumber.open(path) as pdf: pages = pdf.pages text = ''.join(page.extract_text() for page in pages) return text def download_pdf(url,path,pdf_name): \"\"\"下载PDF文件\"\"\" file_path = os.path.join(path,pdf_name) if os.path.exists(file_path)==False: if os.path.exists(path)==False: os.makedirs(path) r=requests.get(url) with open(file_path,'wb') as f: f.write(r.content) def get_download_urls(keyword): \"\"\"获取列表信息及PDF下载链接\"\"\" page = 1 url = 'http://query.sse.com.cn/search/getSearchResult.do?search=qwjs\u0026jsonCallBack=\u0026searchword=T_L+CTITLE+T_E+T_L' + quote(keyword) +'+T_R+and+cchannelcode+T_E+T_L0T_D8311T_D8321T_D8348T_D8349T_D8365T_D8703T_D8828T_D8834T_D9856T_D9860T_D9862T_D9888T_D9889T_D9892T_D10004T_D10011T_D10743T_D12002T_D88888888T_RT_R\u0026orderby=-CRELEASETIME\u0026page=%s\u0026perpage=10\u0026_=1660204739688' % page header = { 'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36 Edg/103.0.1264.71', 'Host':'query.sse.com.cn', 'Referer':'http://www.sse.com.cn/', } response = requests.get(url,headers=header) json_str = response.json() total_page = int(json_str['countPage']) infos = [] for page in range(total_page+1): ttime.sleep(4) # 暂停的秒数，避免频繁调用 print('获取第%s页信息，共%s页' % (page,total_page)) url = 'http://query.sse.com.cn/search/getSearchResult.do?search=qwjs\u0026jsonCallBack=\u0026searchword=T_L+CTITLE+T_E+T_L' + quote(keyword) +'+T_R+and+cchannelcode+T_E+T_L0T_D8311T_D8321T_D8348T_D8349T_D8365T_D8703T_D8828T_D8834T_D9856T_D9860T_D9862T_D9888T_D9889T_D9892T_D10004T_D10011T_D10743T_D12002T_D88888888T_RT_R\u0026orderby=-CRELEASETIME\u0026page=%s\u0026perpage=10\u0026_=1660204739688' % page response = requests.get(url,headers=header) json_str = response.json() for row in json_str['data']: title = row['CTITLE_TXT'] print(title) link = row['CURL'] url = urljoin(\"http://www.sse.com.cn/\",link) date = row['CRELEASETIME'] time = row['CRELEASETIME2'] file_type = row['MIMETYPE'] id = row['DOCID'] data = { 'title':title, 'url':url, 'date':date, 'time':time, 'file_type':file_type, 'id':id } infos.append(data) return infos def upload_mysql(connect, cursor, item, table_name): \"\"\"上传字典数据到mysql数据库\"\"\" keys = ','.join(item.keys()) values = ','.join(['%s']*len(item)) sql = 'insert into %s(%s) values(%s) on duplicate key update ' % ( table_name, keys, values) update = ','.join([key + '=%s' for key in item]) sql += update try: cursor.execute(sql, tuple(item.values())*2) connect.commit() except: connect.rollback() if __name__ == '__main__': # 使用数据库，如果不将解析的数据传到数据库，可以注释掉,注意修改数据库账号、密码信息 # connect = pymysql.connect( # host = '127.0.0.1', db = 'book', user = 'root', # passwd = 'xxxx', charset = 'utf8') # cursor = connect.cursor() # table_name = 'chufa' # 使用数据库，如果不将解析的数据传到数据库，可以注释掉 directory = './pdf' # 下载的pdf文件保存文件夹路径 infos = get_download_urls('警示函') df = pd.DataFrame(infos) df.to_excel('下载链接.xlsx',index=False) # 将获取到的列表信息保存到本地 output = [] for row in infos: url = row['url'] pdf_name = row['title'] + '.' + row['file_type'] try: download_pdf(url,directory,pdf_name) # 下载PDF print('下载文件：%s' % pdf_name) path = os.path.join(directory,pdf_name) content = extract_pdf(path) except: print('下载文件失败') content = '' row['content'] = content # 传数据库,如果不用数据库可以注释掉 # upload_mysql(connect,cursor,row,table_name) 由于解析的 PDF 文字很多，直接输出成 Excel 会串行，所以我是在第 4 步保存数据的时候， 把数据保存在数据库中，然后把数据库的表导出成 Excel 。 为了让读者能执行代码，我把上传数据库的代码注释了，但是解析的content你就看不到。 如果你会 mysql 数据库，可以把取消注释代码。 如果你想查询其它的关键词，下载 PDF ，可以修改这行代码的关键词： infos = get_download_urls('警示函') ","date":"2022-08-14","objectID":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/:3:0","tags":["python"],"title":"上交所警示函批量下载","uri":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/"},{"categories":["效率"],"content":"文件信息及PDF下载 我把下载好的信息和 PDF 也打包分享大家，有需要的可以直接下载： https://pan.baidu.com/s/1tTErvLvPgo0R30WTP9nUvA?pwd=k3sr ","date":"2022-08-14","objectID":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/:4:0","tags":["python"],"title":"上交所警示函批量下载","uri":"/posts/20220814220542-%E4%B8%8A%E4%BA%A4%E6%89%80%E8%AD%A6%E7%A4%BA%E5%87%BD%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/"},{"categories":["工作"],"content":"最近在投一个资金分析的标，需要对几百个账户资金数据进行分析。 一般我们审计一家企业的时候，是很难对资金数据进行穿透的，为什么？ 因为我们只有被审计企业的资金账户数据，他的上游、下游的数据我们都不可能获取到。 所以，我们无法对整个资金链进行穿透。 也就是说，最困难的点是我们没有*数据*。 而这个项目最有意思是公安机关能获取到所有数据，我们需要做的就是分析。 那么在有数据的情况下怎么去分析呢？ 用 Excel 肯定不行吧，几百个账户，上亿的流水，眼睛去看或者用公式去看都很难。你很难直观知道这个钱分批转出去后，最终到了哪些账户里。 这就需要复杂网络分析的技术，去找网络中资金走的什么链路，最终归集到哪里，哪些节点是关键节点等等？ 所以这几天我正在学习复杂网络分析的相关知识，以及 python 的=networkx=库。 我非常期待能做这个项目，并把学到的知识运用到实战中。 ","date":"2022-08-14","objectID":"/posts/20220814214247-%E5%AD%A6%E4%B9%A0/:0:0","tags":["IT审计"],"title":"学习","uri":"/posts/20220814214247-%E5%AD%A6%E4%B9%A0/"},{"categories":["工作"],"content":"需求为向导 我一般不太喜欢去为了学习一个新的知识而学习新的知识，或者是为了考证而考证。 我喜欢在工作中看什么东西对我有用，我再去针对性地去学习，也就是以需求为向导地学习。 这样会有非常大的动力，并且学习过程中，能立马解决现实中的问题，带来强烈的正向反馈，进而促使我投入更多精力去掌握这些新的知识。 随着用这些知识解决问题数量的增多，就会慢慢从入门到精通。 而这个过程是非常有趣的，娱乐的，我感觉很多时候比玩游戏、刷剧有趣多了。 我基本休息的时间，都在干类似的事情，乐于其中。 祝读者周末愉快！ ","date":"2022-08-14","objectID":"/posts/20220814214247-%E5%AD%A6%E4%B9%A0/:1:0","tags":["IT审计"],"title":"学习","uri":"/posts/20220814214247-%E5%AD%A6%E4%B9%A0/"},{"categories":["效率"],"content":"前面在所里的时候，一位经理问我一些效率工具使用的问题。 我把以前做的东西告诉了她大概怎么使用的，然后给她了一个以前整理过的链接，让她自己去看。 聊到最后，我就说搞这些就是浪费自己时间，方便别人，而且还不能升职。 她也点点头，认同这个事实。 当时初、中级的时候就学了很多这些，也做了很多工具，当然完全是为了方便我自己不去做重复的工作，这是一个理念的问题。 以前那种 VBA 工具，我现在一个都没有去做了。不是因为我理念变了，或者说正常工作多了，而是我完全没有这些需求，我做它干嘛？ 我折腾的都是自己工作上用得上的东西，能帮助我不做重复工作的事。 只是每个时间段，学的东西不一样。 我仍然还是每天浪费了很多时间在学东西上面。 最近我从 vim 编辑器转到了 emacs 编辑器上面， 一个是编辑器之神，一个是神之编辑器。很多时候就是纯粹浪费时间。 但这种浪费时间，对于我来说是娱乐的，类似于喜欢打游戏的人的一样，一种消遣方式。 比如，上周有同事，让我把上交所的警示函给她找出来。 网站上是 pdf 文件。 由于我以前浪费过时间折腾过 python ，所以也就帮忙写了个爬虫批量把 PDF 下载下来，然后读取 PDF 的内容，整理成 Excel 。 最后发给她所有信息，以及打包的 PDF 文件。 不过我好像自己又浪费了几个小时时间。 ","date":"2022-08-13","objectID":"/posts/20220813233123-%E6%88%91%E6%B5%AA%E8%B4%B9%E4%BA%86%E5%BE%88%E5%A4%9A%E6%97%B6%E9%97%B4/:0:0","tags":["杂文"],"title":"我浪费了很多时间","uri":"/posts/20220813233123-%E6%88%91%E6%B5%AA%E8%B4%B9%E4%BA%86%E5%BE%88%E5%A4%9A%E6%97%B6%E9%97%B4/"}]